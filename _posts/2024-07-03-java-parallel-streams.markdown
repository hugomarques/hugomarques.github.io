---
title: "Paralelismo e Concorr√™ncia 102: Java parallel streams na pr√°tica"
published: true
description: Frite sua CPU com o poder do parallel streams
tags: #java #parallel #concurrency #threads
cover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfszopvhn1gmdbe085z8.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2024-07-03
---

No artigo anterior, ["Paralelismo e Concorr√™ncia 101"](https://dev.to/hugaomarques/paralelismo-e-concorrencia-101-2pgc), exploramos os conceitos fundamentais sobre esses dois t√≥picos. Discutimos como esses conceitos permitem que programas realizem m√∫ltiplas tarefas simultaneamente, melhorando o desempenho e a efici√™ncia.

Neste segundo artigo da s√©rie, vamos nos aprofundar no uso do `parallel stream` em Java. Introduzido no Java 8, o `parallel stream` √© uma funcionalidade que facilita o processamento paralelo de cole√ß√µes, aproveitando m√∫ltiplos n√∫cleos da CPU para melhorar o desempenho de opera√ß√µes em grandes volumes de dados. 

Vamos explorar como o `parallel stream` funciona, suas vantagens e desvantagens, e como personalizar o pool de threads utilizado. Tamb√©m discutiremos a t√©cnica de "work-stealing" implementada pelo `ForkJoinPool` e sua import√¢ncia para o balanceamento de carga e efici√™ncia.

Vamos l√° que temos muito conte√∫do pra cobrir!

## Tabela de conte√∫do
- [Parallel streams: Paralelismo de forma f√°cil](#parallel-stream-paralelismo-de-forma-f√°cil)
- [Paralelismo e concorr√™ncia](#paralelismo-e-concorr√™ncia)
- [ ForkJoinPool - √© o que homi üò≥?](#forkjoinpool-√©-o-que-homi-)
- [Work-stealing no ForkJoinPool](#-raw-workstealing-endraw-no-forkjoinpool)
- [Performance entre Sequential e Parallel](#performance-entre-raw-sequential-endraw-e-raw-parallel-endraw-)
- [Conclus√£o](#conclus√£o)

## Parallel stream: Paralelismo de forma f√°cil

O Java 8 introduziu streams como uma nova forma de iterar e realizar opera√ß√µes em cole√ß√µes de forma declarativa. Os streams fornecem uma API rica para manipula√ß√£o de dados, permitindo opera√ß√µes como filtro, mapeamento, redu√ß√£o e muito mais.

Os streams podem ser criados no modo sequencial ou no modo de execu√ß√£o paralela. Vejamos como criar e usar ambos os tipos de streams com exemplos.

### Sequential

```java
import java.util.Arrays;
import java.util.List;

public class SequentialStreamExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Criando um stream sequencial
        numbers.stream()
               .forEach(n -> System.out.println("Thread: " + Thread.currentThread().getName() + " - N√∫mero: " + n));
    }
}
```

Neste exemplo, o m√©todo stream() cria um stream sequencial a partir da lista de n√∫meros. A opera√ß√£o `forEach` itera sobre cada elemento da lista e imprime o n√∫mero juntamente com o nome da thread que est√° processando o elemento. Como √© um stream sequencial, todos os elementos s√£o processados pela mesma thread.

Se rodarmos o exemplo acima, n√≥s veremos o seguinte resultado:

```java
‚ûú  sandbox java SequentialStreamExample      
Thread: main - N√∫mero: 1
Thread: main - N√∫mero: 2
Thread: main - N√∫mero: 3
Thread: main - N√∫mero: 4
Thread: main - N√∫mero: 5
Thread: main - N√∫mero: 6
Thread: main - N√∫mero: 7
Thread: main - N√∫mero: 8
Thread: main - N√∫mero: 9
Thread: main - N√∫mero: 10
```

### Parallel

Agora vamos rodar um exemplo com `parallel`. Para isso, basta criarmos o nosso stream com `parallel stream`:

```java
import java.util.Arrays;
import java.util.List;

public class ParallelStreamExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Criando um stream paralelo
        numbers.parallelStream()
                .forEach(n -> System.out.println("Thread: " + Thread.currentThread().getName() + " - N√∫mero: " + n));
    }
}
```

Se executarmos esse exemplo m√∫ltiplas vezes, a ordem sempre vai ser algo diferente:

```java
‚ûú  sandbox java ParallelStreamExample  
Thread: ForkJoinPool.commonPool-worker-2 - N√∫mero: 2
Thread: main - N√∫mero: 7
Thread: ForkJoinPool.commonPool-worker-6 - N√∫mero: 4
Thread: ForkJoinPool.commonPool-worker-3 - N√∫mero: 5
Thread: ForkJoinPool.commonPool-worker-4 - N√∫mero: 9
Thread: ForkJoinPool.commonPool-worker-1 - N√∫mero: 3
Thread: ForkJoinPool.commonPool-worker-9 - N√∫mero: 10
Thread: ForkJoinPool.commonPool-worker-8 - N√∫mero: 6
Thread: ForkJoinPool.commonPool-worker-7 - N√∫mero: 8
Thread: ForkJoinPool.commonPool-worker-5 - N√∫mero: 1
```

Existem outras formas de criar streams, tanto sequenciais quanto paralelos, mas eu deixo isso como dever de casa pra voc√™s ü§ì.

## Paralelismo e concorr√™ncia

Agora que vimos um exemplo simples com `parallel`, como ele se relaciona com os conceitos que discutimos no [artigo anterior de paralelismo e concorr√™ncia](https://dev.to/hugaomarques/paralelismo-e-concorrencia-101-2pgc)?

### Como o `parallel stream` utiliza concorr√™ncia?

Quando voc√™ transforma um Stream em um `parallel stream`, se poss√≠vel, o Java divide a tarefa em v√°rias subtarefas que podem ser executadas simultaneamente. Cada subtarefa √© atribu√≠da a uma thread separada, que pode ser executada em um n√∫cleo diferente do processador. O gerenciamento dessas threads envolve conceitos de concorr√™ncia, como:

* Thread Pool: O `ForkJoinPool` √© frequentemente usado para gerenciar threads em `parallel stream`.
* Sincroniza√ß√£o: Garantia de que as opera√ß√µes em dados compartilhados s√£o seguras para threads.
* Troca de contexto: Atrav√©s do work-stealing o `ForkJoinPool` pega tasks da fila de threads ocupadas para serem executadas em threads que est√£o desocupadas.

### Como o `parallel stream` utiliza paralelismo?

O `parallel stream` aproveita o paralelismo ao executar essas subtarefas simultaneamente em m√∫ltiplos n√∫cleos. Isso pode resultar em uma execu√ß√£o mais r√°pida, especialmente para opera√ß√µes que s√£o independentes e podem ser realizadas em paralelo sem interfer√™ncia entre si.

## ForkJoinPool - √© o que homi üò≥ ? 

Por padr√£o, o `parallel stream` utiliza o `ForkJoinPool.commonPool()`, que √© um pool de threads compartilhado dispon√≠vel para todas as tarefas de fork/join. Esse pool √© configurado para usar um n√∫mero de threads igual ao n√∫mero de n√∫cleos dispon√≠veis no processador, o que permite que as tarefas sejam executadas em paralelo de maneira eficiente.

Se quisermos verificar quantas threads o nosso `forkJoinPool` ter√°, basta fazermos print do n√∫mero de cores dispon√≠veis no Java. Por exemplo, se eu rodar a seguinte linha em qualquer programa Java no meu mac:

```java
System.out.println("Number of cores available: "+ Runtime.getRuntime().availableProcessors());

Number of cores available: 12
```

Notem, que o n√∫mero acima pode ser mais complicado um pouco, em especial, quando se envolve containers.

### Modificando o tamanho do `ForkJoinPool` padr√£o

> üõë Dica: N√ÉO fa√ßa isso! 

O tamanho padr√£o do `ForkJoinPool.commonPool()` pode ser modificado configurando a propriedade do sistema `java.util.concurrent.ForkJoinPool.common.parallelism`. Isso pode ser feito ao iniciar a JVM com a op√ß√£o -D, por exemplo:

```java
java -Djava.util.concurrent.ForkJoinPool.common.parallelism=8 MinhaAplicacao
```

Este comando configura o `ForkJoinPool.commonPool()` para utilizar 8 threads.

### Por que voc√™ **N√ÉO** deve modificar o tamanho padr√£o do ForkJoinPool?

Modificar o tamanho padr√£o do `ForkJoinPool.commonPool()` pode afetar negativamente outras partes da aplica√ß√£o ou bibliotecas que tamb√©m utilizam o pool comum. 

O `commonPool` √© um recurso compartilhado, e alterar seu comportamento pode introduzir problemas de desempenho e concorr√™ncia dif√≠ceis de diagnosticar. Em vez disso, √© recomend√°vel criar e utilizar um `ForkJoinPool` personalizado para tarefas espec√≠ficas que requerem paralelismo ajustado, garantindo que outras partes da aplica√ß√£o permane√ßam est√°veis e previs√≠veis.

### Qual √© uma alternativa melhor?

> ‚úÖ Dica: Se necess√°rio, fa√ßa isso!

Para modificar o pool de threads localmente voc√™ pode usar o m√©todo `ForkJoinPool#submit` para submeter uma tarefa que executa o `parallel stream` no contexto do pool personalizado.

```java
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ForkJoinPool;

public class CustomForkJoinPoolExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Configurando o ForkJoinPool para usar um n√∫mero espec√≠fico de threads
        ForkJoinPool customThreadPool = new ForkJoinPool(4);

        try {
            customThreadPool.submit(() ->
                    numbers.parallelStream()
                            .forEach(n -> {
                                System.out.println("Thread: " + Thread.currentThread().getName() + " - N√∫mero: " + n);
                            })
            ).get();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            customThreadPool.shutdown();
        }
    }
}
```

Note que quando eu fiz o print anterior, eu tinha 12 cores dispon√≠veis, por√©m observe que ao executar o c√≥digo acima, eu s√≥ terei 4 threads.

```java
Thread: ForkJoinPool-1-worker-4 - N√∫mero: 6
Thread: ForkJoinPool-1-worker-4 - N√∫mero: 8
Thread: ForkJoinPool-1-worker-1 - N√∫mero: 7
Thread: ForkJoinPool-1-worker-2 - N√∫mero: 3
Thread: ForkJoinPool-1-worker-3 - N√∫mero: 9
Thread: ForkJoinPool-1-worker-3 - N√∫mero: 1
Thread: ForkJoinPool-1-worker-4 - N√∫mero: 10
Thread: ForkJoinPool-1-worker-1 - N√∫mero: 2
Thread: ForkJoinPool-1-worker-2 - N√∫mero: 5
Thread: ForkJoinPool-1-worker-3 - N√∫mero: 4
```

Tamb√©m note que no primeiro exemplo, n√≥s temos tarefas sendo executadas pela `main` thread. Por√©m, no `custom` nossas tarefas s√£o executadas apenas pelos workers definidos no nosso pool.

Agora que sabemos sobre como criar `parallel stream` e onde eles s√£o executados (`ForkJoinPool`), vamos discutir mais algumas coisas legais sobre essa funcionalidade.

## `Work-Stealing` no ForkJoinPool

Como mencionamos anteriormente, o `ForkJoinPool` √© o pool de threads padr√£o utilizado pelo `parallel stream`. Esse pool implementa uma t√©cnica chamada "work-stealing" (roubo de trabalho). Esta t√©cnica √© fundamental para garantir a efici√™ncia e o balanceamento de carga entre as threads.

### Como Funciona o Work-Stealing?

* Divis√£o de Tarefas: Quando uma tarefa √© submetida ao `ForkJoinPool`, ela √© dividida em sub-tarefas menores distribu√≠das entre as threads do pool. Cada thread mant√©m uma fila de tarefas.
* Execu√ß√£o Local: Cada thread tenta executar as tarefas da sua pr√≥pria fila. Se uma thread termina suas tarefas ou ficar ociosa, ela verifica se h√° mais trabalho a ser feito.
* Roubo de Trabalho: Se uma thread fica sem tarefas, ela tenta roubar tarefas das filas de outras threads. Isso √© feito pegando tarefas do final da fila de outra thread, enquanto a pr√≥pria thread v√≠tima continua pegando tarefas do in√≠cio de sua fila.

Este mecanismo de roubo de trabalho ajuda a manter todas as threads ocupadas e a balancear a carga de trabalho de maneira eficiente.

### Exemplo de Observa√ß√£o do Work-Stealing

Vamos criar um ForkJoinPool personalizado com um n√∫mero espec√≠fico de threads e simular tarefas com diferentes tempos de execu√ß√£o. O objetivo √© observar como as threads ociosas roubam trabalho das threads ainda ocupadas.

```java
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ForkJoinPool;

public class WorkStealingExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Configurando o ForkJoinPool para usar um n√∫mero espec√≠fico de threads
        ForkJoinPool customThreadPool = new ForkJoinPool(4);

        try {
            customThreadPool.submit(() ->
                    numbers.parallelStream()
                            .forEach(n -> {
                                try {
                                    if (n % 2 == 0) {
                                        // Simulando uma tarefa que leva tempo
                                        Thread.sleep(2000);
                                    } else {
                                        Thread.sleep(100);
                                    }
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("Thread: " + Thread.currentThread().getName() + " - N√∫mero: " + n);
                            })
            ).get();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            customThreadPool.shutdown();
        }
    }
}
```

Note que se voc√™ executar o c√≥digo acima, vai haver uma tend√™ncia das tarefas √≠mpares terminarem primeiro. Por exemplo, uma das minhas execu√ß√µes foi:

```java
Thread: ForkJoinPool-1-worker-2 - N√∫mero: 3
Thread: ForkJoinPool-1-worker-1 - N√∫mero: 7
Thread: ForkJoinPool-1-worker-3 - N√∫mero: 9
Thread: ForkJoinPool-1-worker-2 - N√∫mero: 5
Thread: ForkJoinPool-1-worker-4 - N√∫mero: 6
Thread: ForkJoinPool-1-worker-4 - N√∫mero: 1
Thread: ForkJoinPool-1-worker-3 - N√∫mero: 10
Thread: ForkJoinPool-1-worker-1 - N√∫mero: 2
Thread: ForkJoinPool-1-worker-2 - N√∫mero: 4
Thread: ForkJoinPool-1-worker-4 - N√∫mero: 8
```

E o que acontece se o `forkJoinPool` n√£o tivesse `work-stealing`? Pois bem, as threads com tarefas menores terminariam suas tarefas primeiro e ficariam ociosas, enquanto as threads com tarefas maiores estariam ocupadas, gerando um gargalo desnecess√°rio na aplica√ß√£o.

Maravilha! Voc√™ deve estar pensando "Agora que eu sei tudo isso, eu sempre vou criar `parallel streams` para aumentar a performance das minhas aplica√ß√µes!"

Calma jovem padawan, como sempre, depende...

## Performance entre `Sequential` e `Parallel`

Existe uma linha onde utilizar parallel n√£o √© interessante. O Java √© excelente em otimizar o c√≥digo da aplica√ß√£o, ent√£o muitas vezes, um simples sequential stream() vai ter uma performance excelente! Vamos ver um exemplo com c√≥digo:

```java
// Imports removidos pra manter o c√≥digo breve. Veja o repo para o c√≥digo completo.

@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.MILLISECONDS)
@State(Scope.Thread)
@Fork(value = 2)
public class SeqParallelBenchmark {

    @Param({"100", "1000000"})
    private int size;
    private List<Integer> data;

    @Setup
    public void setup() {
        data = IntStream.rangeClosed(1, size).boxed().collect(Collectors.toList());
    }

    @Benchmark
    public void test_sequential() {
        data.stream().mapToInt(Integer::intValue).sum();

    }

    @Benchmark
    public void test_parallel() {
        data.stream().parallel().mapToInt(Integer::intValue).sum();
    }

    public static void main(String[] args) throws RunnerException {
        Options opt = new OptionsBuilder()
                .include(SeqParallelBenchmark.class.getName()) // specify the benchmark class here
                .forks(2)
                .build();
        new Runner(opt).run();
    }
}

```

Quando eu rodei o benchmark acima na minha m√°quina eu obtive o seguinte resultado:

```java
Benchmark                              (size)  Mode  Cnt   Score    Error  Units
SeqParallelBenchmark.test_sequential      100  avgt   10  ‚âà 10‚Åª‚Å¥           ms/op
SeqParallelBenchmark.test_parallel        100  avgt   10   0.022 ¬±  0.008  ms/op

SeqParallelBenchmark.test_sequential  1000000  avgt   10   0.482 ¬±  0.016  ms/op
SeqParallelBenchmark.test_parallel    1000000  avgt   10   0.117 ¬±  0.016  ms/op
```

Observe que com 100 elementos, o m√©todo sequential roda em 0.0001 ms enquanto que o parallel leva 0.022 ms, quase 200x mais lento. Por√©m, quando rodamos para milh√µes de elemento, o parallel se sai 4x mais r√°pido to que o resultado sequencial.

Eu rodei outro benchmark com uma opera√ß√£o diferente dessa vez:

```java
// Imports removidos pra manter o c√≥digo breve. Veja o repo para o c√≥digo completo.

@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.MILLISECONDS)
@State(Scope.Thread)
public class AnotherSeqParallelBenchmark {

    @Param({"100", "1000000"})
    private int size;

    private List<Integer> data;

    @Setup
    public void setup() {
        data = IntStream.rangeClosed(1, size).boxed().collect(Collectors.toList());
    }

    @Benchmark
    public List<Double> testSequentialStream() {
        return data.stream()
                .map(Math::sin)
                .collect(Collectors.toList());
    }

    @Benchmark
    public List<Double> testParallelStream() {
        return data.parallelStream()
                .map(Math::sin)
                .collect(Collectors.toList());
    }

    public static void main(String[] args) throws RunnerException {
        Options opt = new OptionsBuilder()
                .include(AnotherSeqParallelBenchmark.class.getName()) // specify the benchmark class here
                .forks(2)
                .build();

        new Runner(opt).run();
    }
}
```

E o resultado foi bem similar:

```java
Benchmark                                          (size)  Mode  Cnt   Score    Error  Units
AnotherSeqParallelBenchmark.testSequentialStream      100  avgt   10   0.001 ¬±  0.001  ms/op
AnotherSeqParallelBenchmark.testParallelStream        100  avgt   10   0.027 ¬±  0.005  ms/op

AnotherSeqParallelBenchmark.testParallelStream    1000000  avgt   10   2.234 ¬±  0.025  ms/op
AnotherSeqParallelBenchmark.testSequentialStream  1000000  avgt   10  16.164 ¬±  0.573  ms/op
```

Note como mais uma vez em cima uma de collection pequena o parallel teve uma performance pior que o sequential (~27x pior). Por√©m, ao se deparar com milh√µes de c√°lculo a performance foi ~8x mais r√°pida do que sequential.

## Conclus√£o

**N√£o utilize `parallel`:**

1. **Se sua opera√ß√£o √© I/O bound**: Seja uma chamada de rede para um microservi√ßo ou escrita de arquivos. Por qu√™? Voc√™ estar√° utilizando muito mais o I/O do que a CPU, inclusive, voc√™ pode abrir muito mais opera√ß√µes do que apenas o n√∫mero de n√∫cleos da sua aplica√ß√£o. Por exemplo, em um cen√°rio recente eu abri ~500 conex√µes com outro microservi√ßo üò±, muito acima dos 8 n√∫cleos da minha m√°quina.
2. **Se a sua massa de dados √© pequena**: `Parallel` adiciona um overhead, como vimos acima, com a utiliza√ß√£o de uma thread pool, coordena√ß√£o de tarefas, roubo de tarefas paradas, etc. Dado isso, se sua massa de dados for pequena, √© prov√°vel que um `sequential` execute mais r√°pido do que um `parallel`. Na d√∫vida, execute testes na sua aplica√ß√£o para observar se vale a pena.

**Utilize `parallel`:**

1. **Se o seu cen√°rio √© CPU bound**: Transforma√ß√£o de dados, c√°lculos, etc. Por qu√™? Se o n√∫mero padr√£o de threads no `parallel stream` √© o n√∫mero de n√∫cleos da m√°quina e sua opera√ß√£o √© CPU bound, isso significa que voc√™ vai conseguir utilizar todos os n√∫cleos em paralelo, aproveitando ao m√°ximo os recursos dispon√≠veis.
2. **Se as suas tarefas s√£o independentes**: Como voc√™ quer usar paralelismo, √© interessante que suas tarefas sejam independentes e isoladas, j√° que elas ser√£o executadas em contextos diferentes e em uma ordem imprevis√≠vel.
3. **Se sua m√©trica mostra ganho de performance**: Realize alguns testes, por exemplo, utilizando uma ferramenta como JMH.

`Parallel streams` √© um modo f√°cil de embarcar no mundo da programa√ß√£o paralela, j√° que a funcionalidade abstrai diversas preocupa√ß√µes. Ela n√£o √© aplic√°vel para todos os casos, mas quando BEM aplicada pode ser uma m√£o na roda para aumentar a performance de suas aplica√ß√µes.

Todos os exemplos deste post est√£o dispon√≠veis no meu reposit√≥rio: <a href="https://github.com/hugomarques" target="_blank" style="text-decoration: none;">
  <i class="fab fa-fw fa-github"></i> GitHub
</a>

No pr√≥ximo post, vamos explorar mais o uso de threads tradicionais e thread pools com executors. Nos vemos por l√°!
