---
title: Template Method com composi√ß√£o
published: true
description: Como atingir o mesmo objetivo do Template Method atrav√©s de composi√ß√£o em vez de heran√ßa. 
tags: #designpatterns #composicao #heranca #java
# cover_image: https://direct_url_to_image.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2023-10-18 22:13 +0000
---

Eu acho que esse vai ser curto, vamos l√°! Hoje mais cedo eu fiz o seguinte coment√°rio sobre heran√ßa no finado Twitter.

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x1a8e8081ofzx2fx1p3.png)

Imediatamente, surgiram alguns coment√°rios interessantes, mas um dele me chamou a aten√ß√£o. O amigo @DevCorinthiano777 perguntou:

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41qi62r3k6u5jrpk8o7m.png)

E com isso, automaticamente as engrenagens internas aqui na minha cabe√ßa come√ßaram a funcionar ü§î.

## Mas o que danado √© um Template Method?

Sendo super sucinto, o Template Method √© um "design pattern" (ou padr√£o de projeto em PT-br), que define uma "receita de bolo". Essa receita √© definida na super-classe e a partir da√≠ as classes filhas podem implementar passos espec√≠ficos dessa "receita". Isso fica mais claro no exemplo abaixo:

Disclaimer: Eu sou um dev cansado, usei o gepeto pra me ajudar a escrever o exemplo r√°pido.

```Java
abstract class ReviewTemplate {
    private String reviewText;

    public ReviewTemplate(String reviewText) {
        this.reviewText = reviewText;
    }

    // M√©todo de template que orquestra o processo de valida√ß√£o e salvamento
    public void processReview() {
        if (validateReview()) {
            saveReview();
            System.out.println("Revis√£o salva com sucesso.");
        } else {
            System.out.println("A revis√£o n√£o √© v√°lida e n√£o foi salva.");
        }
    }

    // M√©todo abstrato que deve ser implementado pelas subclasses para a valida√ß√£o
    protected abstract boolean validateReview();

    // M√©todo comum para salvar a revis√£o (implementa√ß√£o padr√£o)
    private void saveReview() {
        System.out.println("Revis√£o salva no banco de dados: " + reviewText);
    }
}

class CriarReview extends ReviewTemplate {
    public CriarReview(String reviewText) {
        super(reviewText);
    }

    @Override
    protected boolean validateReview() {
        // Implementa√ß√£o espec√≠fica de valida√ß√£o para criar uma revis√£o
        return reviewText != null && !reviewText.isEmpty();
    }
}

class AtualizarReview extends ReviewTemplate {
    public AtualizarReview(String reviewText) {
        super(reviewText);
    }

    @Override
    protected boolean validateReview() {
        // Implementa√ß√£o espec√≠fica de valida√ß√£o para atualizar uma revis√£o
        return reviewText != null && !reviewText.isEmpty();
    }
}

public class Main {
    public static void main(String[] args) {
        // Criar uma nova revis√£o
        ReviewTemplate criarReview = new CriarReview("Esta √© uma √≥tima revis√£o.");
        criarReview.processReview();

        // Atualizar uma revis√£o existente
        ReviewTemplate atualizarReview = new AtualizarReview("Vers√£o atualizada da revis√£o.");
        atualizarReview.processReview();
    }
}
```

Observe como o review template define um padr√£o de como todas as suas filhas s√£o tratadas. A partir da√≠ as classes filhas s√≥ seguem esse padr√£o, implementando peda√ßos do algoritmo e expondo apenas o m√©todo p√∫blico `processReview()`

## Entendi, mas se a implementa√ß√£o usa heran√ßa, como tu vai fazer pra usar composi√ß√£o?

Simples, a√≠ que entra a m√°gica da inje√ß√£o de depend√™ncias. Olha que bacana:

```Java
interface ReviewValidator {
   
    public boolean validateReview();

}

class CriarReviewValidator implements ReviewValidator {
    private String reviewText;

    public ReviewValidator(String reviewText) {
        this.reviewText = reviewText;
    }

    public boolean validateReview() {
        // L√≥gica de valida√ß√£o comum para todas as revis√µes
        return reviewText != null && !reviewText.isEmpty();
    }
}

class AtualizarReviewValidator implements ReviewValidator {
    private String reviewText;

    public ReviewValidator(String reviewText) {
        this.reviewText = reviewText;
    }

    public boolean validateReview() {
        // L√≥gica de valida√ß√£o comum para todas as revis√µes
        return reviewText != null && !reviewText.isEmpty();
    }
}

class ReviewWriter {
    private ReviewValidator validator;

    public ReviewWriter(ReviewValidator validator) {
        this.validator = validator;
    }

    public void writeReview() {
        if (validator.validateReview()) {
            saveReview();
            System.out.println("Revis√£o salva com sucesso.");
        } else {
            System.out.println("A revis√£o n√£o √© v√°lida e n√£o foi salva.");
        }
    }

    private void saveReview() {
        System.out.println("Revis√£o salva no banco de dados: " + validator.reviewText);
    }
}

public class Main {
    public static void main(String[] args) {
        // Criar uma nova revis√£o
        ReviewWriter criarReview = new ReviewWriter(new CriarReviewValidator("Essa n√£o √© uma boa review"));
        criarReview.writeReview();

        // Atualizar uma revis√£o existente
        ReviewWriter atualizarReview = new ReviewWriter(new AtualizarReviewValidator("Vers√£o atualizada da revis√£o."));
        atualizarReview.writeReview();
    }
}
```

Viu como d√° pra fazer o mesmo comportamento usando apenas composi√ß√£o de objetos?

T√° blz, entendi. Mas e qual a vantagem disso? 

Com heran√ßa, voc√™ tem um alto acoplamento entre a super-classe e suas filhas. Se voc√™ faz uma mudan√ßa na super-classe, todas as classes filhas s√£o afetadas quer voc√™ queira ou n√£o.

Com composi√ß√£o, os comportamentos ficam todos mais isolados. √â poss√≠vel criar novos comportamentos e inseri-los ou remov√™-los conforme voc√™ desejar e voc√™ n√£o corre o risco de afetar os `validators` caso voc√™ altere o `ReviewWriter`.

## Conclus√£o

Esse post foi escrito de forma super r√°pida, s√≥ porque eu acho o assunto interessante e fazia muito tempo que eu tinha postado algo com c√≥digo. Eu espero que voc√™s tenham curtido o assunto. 

Se foi o caso, deixa a√≠ o like e coment√°rio que isso me incentiva a escrever mais sobre esse tipo de assunto com c√≥digo.
