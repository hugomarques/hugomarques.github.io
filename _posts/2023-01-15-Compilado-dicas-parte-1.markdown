---
title: "Compilado dicas de carreira - parte 1"
published: true
description: Compilado das threads de dicas de carreiras do Twitter 
tags: #carreira #junior 
# cover_image: https://direct_url_to_image.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2023-01-14 23:55 +0000
---

Ol√° pessoal, a pedidos eu decidi compilar as dicas em artigos. Nesse artigo eu vou compilar as primeiras 10 dicas.
As dicas sobre entrevistas em big tech eu vou postar em um artigo √† parte. Vamos l√°?

## Dica #1 - Onboarding em um time novo

Sempre que entrar em um time novo, procure entender onde est√£o as m√©tricas e dashboards e onde est√£o os logs. Isso ajuda muito a entender a stack e se preparar pro oncall. Como colateral, voc√™ verifica a ops do time e onde voc√™s podem melhorar.

## Dica #2 - Gentileza em code reviews

Seja gentil em code reviews, existe um ser humano do outro lado. D√™ sugest√µes quando poss√≠vel e tente fazer mais perguntas pra tentar entender a l√≥gica da outra pessoa. Elogie as partes que voc√™ acha legal. 
Se algo for cr√≠tico/blocker, explique o problema. Proponha uma sugest√£o ou se for complexo demais, proponha um pair programming pra resolver o problema juntos. O principal intuito de code reviews √© a colabora√ß√£o.

## Dica 3 - O que monitorar em um sistema?

N√£o sabe o que monitorar no seu sistema? Que tal come√ßar com os 4 "golden signals"? 
1. Lat√™ncia, 
2. Traf√©go (rps), 
3. Errors, 
4. Satura√ß√£o (CPU/mem√≥ria/disco/network).

E por favor, N√ÉO monitorem a m√©dia. Olhem os "percentiles" p50, p90, p99.
Curiosidade: Embora eu tenha aprendido a usar essas m√©tricas s√≥ recentemente eu aprendi que elas eram chamadas do 4 "golden signals". Acabei aprendendo quando eu fiz uma entrevista e o entrevistador mencionou isso pra mim üòÉ.

## Dica #4 - O que fazer quando o alarme de oncall toca?

Quando o pager tocar, tente estancar o sangramento primeiro. Procure a "root cause" depois. Um bom exemplo disso √©, rolou deployment recente? Fa√ßa o rollback. Rollback feito, an√°lise se o problem foi embora.

Um erro comum √© ficar tentando identificar o que aconteceu de errado, nisso se passa 1 - 2h de usu√°rios sendo impactados. A melhor estrat√©gia √© fazer rollback pra eliminar de cara a chance de ser um erro novo. 

O mesmo vale para suas depend√™ncias. Se o erro t√° vindo de uma depend√™ncia, questione se houve um deployment e pe√ßa pra fazer rollback. Uma vez, a depend√™ncia ficou negando por horas que o erro n√£o era com eles, eu achei um deployment, fizemos rollback e o erro foi mitigado.

Erro mitigado, podemos gastar o tempo necess√°rio para analisar a root cause e corrigir o erro de uma vez por todas. Note que rollback √© apenas um exemplo, as vezes, rodar um comando manual na m√°quina ou qualquer outra interven√ß√£o manual pode ser o passo de mitiga√ß√£o.

## Dica #5 - Monitore suas depend√™ncias

Monitore suas depend√™ncias no dashboard. O que monitorar? Throttling, error rate e lat√™ncia √© um bom come√ßo.  Por qu√™? Reduz o teu tempo de rea√ß√£o. Imagine voc√™ ser pageado 3am e ao abrir o dashboard voc√™ j√° v√™ o servi√ßo X retornando 500. Bem mais r√°pido do que ir ca√ßar logs n√©? Outro uso bacana √© fazer load testing e rapidamente identificar no teu dashboard quais depend√™ncias que s√£o o gargalo da tua aplica√ß√£o.

## Dica #6 - Desconfie da frase "√© seguro, n√≥s j√° fizemos isso antes"

Desconfie da frase "... √© seguro eu/n√≥s j√° fiz isso 1000x (ou mais) antes...". N√£o √© porque algo deu certo antes que vai dar certo de novo. Exemplo, em 2017 um SDE do AWS rodou um script e derrubou o S3 (https://go.aws/3Fcnda8).

Revise seus procedimentos, automatize e teste. Insista que as coisas podem dar errado e tente pensar "o que pode dar errado?". N√£o confie no hist√≥rico do passado, um dia a sorte pode acabar.

## Dica #7 - Utilize o protocolo de 2 pessoas para mudan√ßas manuais em produ√ß√£o

Evite tocar em produ√ß√£o manualmente, mas se for realmente necess√°rio, fa√ßa a mudan√ßa seguindo o protocolo de "2-person rule". Em resumo, 2 pessoas executem a mudan√ßa juntos, tais quais filme para ativar c√≥digos nucleares.

Pessoa 1: "Executando script xpto na tabela y, ok?"
Pessoa 2: Verifica e confirma.

Esse protocolo se tornou bem difundido no AWS depois do evento no S3 (ver dicas anteriores). Para uma boa 2-person rule execute os passos devagar, perguntando por confirma√ß√£o do seu peer.

Se a mudan√ßa for muito complicada, eu recomendo escrever uma "checklist de mudan√ßa" mas essa eu deixo para uma futura dica. Finalmente, se voc√™ est√° pensando "nossa, tudo isso?". Pois √©, melhor automatizar para evitar ficar tocando em Prod n√©? üòÄ

## Dica #8 - Fa√ßa uma ata da reuni√£o

Anote o que √© discutido na reuni√£o, qual foi a decis√£o, se existem "action items" E QUEM √© respons√°vel por cada um deles. Depois da reuni√£o envie as anota√ß√µes pros participantes pra todo mundo ficar alinhado com os pr√≥ximos passos.

Se voc√™ est√° ocupado discutindo e n√£o pode anotar, pe√ßa para algu√©m se voluntariar pra anotar. Essa "besteira" j√° evitou tanto mal entendido. Eu tamb√©m j√° vi n√£o ser feito e as pessoas perderem horas discutindo porque ningu√©m lembrava o que foi acordado.

Um template bacana que eu uso:
- Lista com principais pontos discutidos.
- Lista de pr√≥ximos passos e para CADA um eu coloco um "respons√°vel: <nome da pessoa>", por exemplo, "Enviar o dica #8. Owner: Hugo".

Isso serve para todos ficarem cientes de quem tem que fazer o que.

## Dica #9 - Aprenda a usar suas ferramentas

Otimize suas ferramentas. Gosta de usar Vim? Aprendar a usar Vim de uma forma eficiente. Gosta de IDE? Aprenda os atalhos e os comandos que sua IDE te oferece. Pode parecer besteira mas no longo prazo isso vai te salvar muito tempo.

xemplo real: Mais uma de vez eu fui chamado pra ajudar algu√©m com um bug. Chegando l√° a IDE da pessoa estava toda vermelha, nada compilava, basicamente um editor de texto mais lento. Eu ajeitei a IDE e na hora o erro foi acusado pela IDE.

A regra se aplica a qualquer ferramenta que voc√™ esteja usando com frequ√™ncia: terminal, CLI, IDEs. Aprenda os atalhos, evite repeti√ß√µes, configure a ferramenta pra fazer o seu tempo ser mais eficiente.

Dica #10 - O que eu fiz nos meus primeiros 90 dias no Twitter

> Disclaimer: Eu n√£o estou mais no Twitter mas a dica ainda √© v√°lida mesmo assim.

Meus primeiros 90 dias no @Twitter como Sr SWE foram:

1. Perguntas, perguntas e mais perguntas.
2. Assuma que tudo tem um motivo em vez de chegar "no trampo antigo a gente faz Y e funciona". 
3. Pergunte pra todo mundo, Jr, Pleno, S√™nior, Staff.
4. Tenha paci√™ncia, com o tempo a produtividade e velocidade voltam.
5. Eu gasto um bom tempo investigando como as coisas s√£o feitas ao redor da empresa e n√£o apenas no meu time. Eu leio docs, procuro em wikis, toma um bom tempo mas as vezes acho coisas interessantes.

# Conclus√£o

√â isso a√≠, aguardem que vou compilando o resto das dicas em breve. 
