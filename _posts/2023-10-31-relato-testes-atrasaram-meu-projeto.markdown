---
title: "[Relato] Os testes atrasaram meu projeto /s"
published: true
description: Esse artigo √© uma pequena hist√≥ria como a decis√£o de N√ÉO escrever testes automatizados quase nos custou a entrega de um projeto. 
tags: #tdd #testing #unittests #sistemasdistribuidos
cover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fluc2ebjc8vwp863ady4.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2023-10-29 02:30 +0000
---

> /s √© uma g√≠ria da internet pra dizer que aquela frase cont√©m sarcasmo üòÜ

Quem me segue nas redes sociais ou por aqui sabe que eu sou um entusiasta de testes automatizados e teste de software no geral (n√£o confundir com TDD). 

![Pessoa levantando a m√£o pronta pra discordar e desistindo quando v√™ que eu gosto de testes](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8tf15yv26u96hf5lrrn.jpg)

Esse artigo √© um relato da decis√£o que fizemos no final de 2022, quando eu estava liderando um projeto com prazo apertad√≠ssimo.  Nele, abordarei nosso contexto, nossas hip√≥teses, as consequ√™ncias e o que aprendemos com essa decis√£o. Eu n√£o fornecerei detalhes espec√≠ficos do projeto por motivos de NDA, mas tentarei ser espec√≠fico o suficiente para abordar os pontos desejados.

## Contexto

Em outubro de 2022, eu estava envolvido em um projeto com um prazo extremamente desafiador. O projeto era amb√≠guo, com v√°rias frentes, envolvendo aproximadamente 4 equipes diferentes e cerca de 20 pessoas, entre engenharia e produto.

Quando a equipe de engenharia se reuniu com o gerente para analisar o escopo restante, a proje√ß√£o indicava a entrega para junho de 2023. O problema era que t√≠nhamos um prazo "n√£o-negoci√°vel" de abril de 2023 por raz√µes comerciais. A √∫nica solu√ß√£o vi√°vel? Reduzir o escopo.

Ao analisar o escopo a ser reduzido, incluindo funcionalidades e infraestrutura adicional, nosso gerente fez a seguinte pergunta: "E quanto a toda essa tarefa de testes de integra√ß√£o?". Antes de continuar, uma pausa para definir "testes de integra√ß√£o".

Testes de integra√ß√£o? O qu√™? Vamos para uma pausa estrat√©gica sobre testes de integra√ß√£o.

![Plant√£o da globo](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/narh97v8oj0zlxivg81b.gif)

> No contexto desse artigo, eu me refiro a testes de integra√ß√£o como testes onde √© necess√°rio voc√™ subir sua aplica√ß√£o e/ou interagir com componentes atrav√©s da rede. 
Por exemplo, um `@SpringBootTest` que sobe o contexto e te permite testar a API conversando com o banco de dados.
No meu caso, os testes acima iriam fazer deploy do nosso c√≥digo no AWS (na minha conta e depois na conta de homologa√ß√£o) e de l√° eu poderia testar os v√°rios microservi√ßos interagindo uns com os outros atrav√©s da orquestra√ß√£o.

Agora continuamos com a nossa programa√ß√£o normal...

Onde est√°vamos? Ah sim, o gerente. Voc√™, que est√° lendo, deve estar pensando: "Claro, s√≥ podia ser um gerente...".

![Boromir reclamando da sugest√£o de remover testes](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvr7vf6ezk60s0j7sxk7.jpg)

"Respire fundo" e permita-me acrescentar alguns detalhes:

1. Eu trabalhei com esse gerente por ANOS, e confio extremamente no trabalho dessa pessoa.
2. Ele possui experi√™ncia em testes. Mais do que qualquer um, ele estimulava a equipe de engenharia a trabalhar em testes e aprimorar nossa qualidade.
3. Al√©m disso, ele costumava ouvir o time, principalmente as pessoas mais experientes da equipe. Se naquele momento eu tivesse dito 'Nem pensar', havia uma grande possibilidade de ele acatar minha decis√£o."

## A nossa hip√≥tese

A pergunta feita naquele momento me fez refletir: "Ser√° que realmente conseguiremos economizar tempo e ainda entregar com sucesso?".

O processo de decis√£o foi o seguinte:

1. "N√≥s temos MUITOS testes de unidade; se houver alguma regress√£o no sistema, provavelmente esses testes identificar√£o qualquer erro".
2. Al√©m disso, a parte do sistema que desej√°vamos testar n√£o era trivial; n√£o t√≠nhamos garantia de que os novos testes, do jeito que os est√°vamos projetando, realmente fariam alguma diferen√ßa.
3. Por fim, a equipe trabalhando neste projeto era extremamente experiente, e conhec√≠amos o neg√≥cio e o sistema de ponta a ponta. Consequentemente, pensamos que os testes poderiam ser apenas o time seguindo as melhores pr√°ticas por seguir, sem necessariamente serem √∫teis naquele momento.

Assim, com esse risco documentado, a decis√£o foi tomada. Optamos por prosseguir com os testes de unidade e ignorar o segundo m√©todo de testes de integra√ß√£o at√© a entrega em abril. No entanto, est√°vamos enganados...

## Consequ√™ncias

O nosso primeiro "milestone" era em Dezembro de 2022. Naquele momento, n√≥s poder√≠amos integrar o trabalho sendo feito pelos 4 times e testar os primeiros casos de uso de ponta a ponta. Foi a√≠ que os problemas come√ßaram.
N√≥s documentamos cerca de 16 casos de uso que teriam que ser testados. O setup para esses casos de uso era n√£o trivial e envolvia configurar as contas na AWS das pessoas engenheiras envolvidas nos testes.

Por√©m, o problema de verdade acontecia quando n√≥s encontr√°vamos um "bug". O time tinha que corrigir o bug, enviar a corre√ß√£o e testar manualmente novamente em ambiente de homologa√ß√£o. Obviamente, esse processo todo de re-testar era muito lento e atrasou muito a entrega do nosso primeiro milestone.

Mas o problemas n√£o pararam por a√≠... logo elas chegaram, elas que s√£o as melhores amigas de n√≥s pessoas devs quando estamos com projetos atrasados. Sim, elas, as "regress√µes". Com cada corre√ß√£o que n√≥s envi√°vamos, invariavelmente, n√≥s introduz√≠amos bugs em outras partes do sistema.

![Garotinha olhando casa pegar fogo porque ela confiou nos testes de unidade](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpf3t4k151aak0h5d7et.jpg)

Mas por qu√™ isso estava acontecendo?

## A causa

Pra entender o motivo desses bugs apesar de 90%+ de cobertura de testes √© importante entender algumas detalhes sobre o nosso sistema:
1. Esse projeto envolvia mudan√ßas em 5 servi√ßos diferentes. 
2. Muitas vezes, o que era corrigido no sistema A, tinha o √∫nico objetivo de propagar a informa√ß√£o at√© o sistema C. Apenas no sistema C poder√≠amos verificar que tudo estava correto.
3. Um desses sistemas, era uma orquestra√ß√£o implementada com *AWS Step Functions*. Embora eu goste do controle que esse tipo de arquitetura proporciona, o trade-off √© que voc√™ pode introduzir problemas sem perceber ao modificar um dos estados que afeta indiretamente outro estado na m√°quina de estados. Al√©m disso, testar unicamente um estado n√£o garante que sua m√°quina de estados est√° correta. A melhor forma de testar esse tipo de arquitetura √© escrever testes que exercitem a m√°quina de estados como um todo, e tratar o output final da m√°quina de estados como o que deve ser verificado pelos testes.

Os testes que n√≥s decidimos n√£o escrever afetava justamente o item #3 acima. Ou seja, quando n√≥s quebr√°vamos algo na m√°quina de estado, as vezes n√≥s n√£o perceb√≠amos a consequ√™ncia disso em outras partes do sistema.

![Cpt Pickard frustrado por quebrar o sistema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d4l9rlkmnn4znubyei3.jpg)

## Voltando aos eixos

Logo que entregamos o primeiro milestone, n√≥s decidimos dar um "rollback" naquela decis√£o inicial. Os testes repetitivos e as regress√µes estavam causando tanto dano que era melhor sacrificar uma parte da nossa "gordura" no projeto e implement√°-los pra resolver o problema de uma vez por todas.

Acabou que entregar os testes foi mais r√°pido do que t√≠nhamos estimado inicialmente ü•≥ e depois que adicionamos eles na nossa pipeline de CI/CD as regress√µes pararam 100%. 

## Aprendizado

Essa jornada me ensinou li√ß√µes valiosas: 
1. *Testes s√£o importantes independente do n√≠vel de experi√™ncia do time.* Mesmo com o contexto adequado e com a experi√™ncia o nosso time ainda cometeu erros e causou regress√µes. Os testes s√£o os nossos paraquedas pra nos proteger justamente nessas situa√ß√µes.
2. *Essa experi√™ncia refor√ßou ainda mais o meu entusiasmo por testes.* Eu sempre implementei estrat√©gias de testes em todos os projetos que eu passei e justamente no projeto que eu pensei "sabe de uma coisa, talvez dessa vez a gente n√£o precise?", foi a vez que mais precisamos deles. "Lei de murphy" que fala n√©?
3. Embora o time tenha salvo 3 semanas iniciais pra implementar os testes. N√≥s perdemos muito mais tempo com regress√µes e testes manuais repetitivos, ou seja, *testes v√£o te economizar tempo na cauda longa*.

![He-man nos explica uma valiosa li√ß√£o](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9qfsvccjt6925p0hknk.jpg)

## Conclus√£o

Espero que esse relato abra os olhos de voc√™s sobre a import√¢ncia de testes automatizados. N√£o apenas isso, mas mesmo como um time experiente com 90%+ de cobertura em testes de unidade n√£o foi suficiente pra nos prevenir de enfrentar problemas.

Finalmente, o meu amigo @rponte fala sobre a import√¢ncia de testes de integra√ß√£o em sistemas distribu√≠dos. Eu recomendo MUITO voc√™s assistirem a palestra do Ponte.

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZV4Fl1uEbqw?si=hUpPQfpdKeBFsNuB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>


Inspirado pela talk acima, em sequ√™ncia a esse artigo eu vou escrever mais sobre estrat√©gias de testes em sistemas distribu√≠dos. 

De repente eu consigo trazer mais pessoas pra escrever testes e observar a import√¢ncia deles em nossos projetos. Abra√ßos e se curtiu, me segue a√≠ j√° que meu conte√∫do t√©cnico vai ficar mais por aqui a partir de agora ü•∞.
