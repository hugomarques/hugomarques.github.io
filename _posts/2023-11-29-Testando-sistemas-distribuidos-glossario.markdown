---
title: "Testes - Testando sistemas distribu√≠dos: Fundamentos, conceitos e gloss√°rio"
published: true
description: 
tags: #testes #java #bolhadev #microservicos
cover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgtxv83hxz476hzrmld.png
# Use a ratio of 100:42 for best results.
# published_at: 2023-11-01 18:33 +0000
---

Opa pessoal, muita gente elogiou o √∫ltimo post [[Relato] Testes atrasaram o meu projeto üò± /s](https://dev.to/hugaomarques/relato-os-testes-atrasaram-meu-projeto-s-3lgb). Um dos feedbacks que recebi foi sobre definir melhor os tipos de testes para ajudar no entendimento daquele e de futuros artigos nessa trilha de testes.

Definir os tipos de testes √© um tema espinhoso e sem muito consenso para ser honesto. O meu objetivo n√£o √© dar a palavra final no assunto, mas sim estabelecer um vocabul√°rio padr√£o que usarei para me comunicar com voc√™s. Assim, toda vez que voc√™ falar comigo sobre testes, no m√≠nimo, n√≥s teremos um lugar-comum para a discuss√£o.

## Tipos de testes

Os tipos de testes listados nesse artigo s√£o os mais comuns nas empresas que trabalhei e normalmente s√£o esses os tipos que definem a linguagem que uso para me comunicar.

Notem que estou restringindo esse post apenas √† testes funcionais, ou seja, testes que validam o funcionamento de neg√≥cio da aplica√ß√£o. Testes n√£o-funcionais, como testes de seguran√ßa, de desempenho ou stress tamb√©m existem, mas n√£o s√£o o foco agora.

![A tradicional pir√¢mide de testes](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fibfa1bl5ja28tsg05x.png)

> A tradicional pir√¢mide de testes. Mas ser√° que ela t√° certa mesmo? ü§î

Tendo dado todos esses *disclaimers*, vamos ao que interessa.

## Tabela de conte√∫do
- [Testes de unidade](#testes-de-unidade)
- [Testes de integra√ß√£o](#testes-de-integra√ß√£o)
- [Testes *end-to-end* ou e2e](#testes-end-to-end-ou-e2e
)
- [Can√°rios](#can√°rios)
- [Testes de can√°rio](#testes-de-can√°rio)
- [Mas que testes devo usar](#mas-que-testes-devo-usar)
- [Conclus√£o](#conclus√£o)

## Testes de unidade

Os testes de unidade s√£o os testes mais comuns na maioria dos projetos. Eles validam se nossas classes, m√©todos, fun√ß√µes est√£o funcionando como esperamos. Tem pessoas que s√≥ consideram testes de unidade quando apenas uma classe √© testada em isolamento. Eu n√£o me prendo a essa regra. 

Na minha opini√£o, √© mais importante garantir que a funcionalidade que se deseja testar seja testada da forma mais f√°cil e efetiva poss√≠vel. Como assim f√°cil e efetiva?

F√°cil porque devemos escrever muitos testes. √â importante que cada teste seja o mais direto poss√≠vel de ser escrito. Logo, se √© tranquilo eu criar v√°rios objetos juntos e test√°-los juntos, eu irei testar esses objetos trabalhando em conjunto. Da mesma forma, se fica dif√≠cil escrever o teste com os objetos trabalhando em conjunto, n√≥s escrevemos o teste para o objeto espec√≠fico e usamos *stubs* e/ou *mocks* para isolar as depend√™ncias.

J√° no campo de testes efetivos, √© importante que os testes exercitem o nosso c√≥digo da forma mais interessante poss√≠vel. Vejamos o exemplo abaixo:

```java

public class Calculadora {

    public static double realizarOperacao(double a, double b, OperacaoAritmetica operacao) {
        return switch (operacao) {
            case ADICAO -> a + b;
            case SUBTRACAO -> a - b;
            case MULTIPLICACAO -> a * b;
            case DIVISAO -> b != 0 ? a / b : Double.NaN;
        };
    }
}

public record AdicaoComando(double a, double b) {

  public int execute() {
    return Calculadora.realizarOperacao(this.a, this.b, 
  OperacaoAritmetica.ADICAO);
  }

}

```

Temos uma classe que implementa uma calculadora e outra classe que √© um comando gerado para 2 n√∫meros e usa a nossa calculadora para executar a opera√ß√£o daquele comando. Ignoremos o fato do `AdicaoComando` ser um objeto super simples, o exemplo poderia ser qualquer classe est√°tica usada por outra classe.

Quando escrevemos um teste para a classe `AdicaoComando`, n√≥s mockamos a `Calculadora`? Na minha opini√£o, N√ÉO! O objeto calculadora √© f√°cil de ser usado, n√£o tem porque n√£o usar o c√≥digo o mais pr√≥ximo poss√≠vel do que acontece em produ√ß√£o.

Como testar√≠amos a classe `AdicaoComando`?

```java
public class AdicaoCommandTest {

    @Test
    void executeDeveRetornarSomaCorreta() {
        // Arrange
        AdicaoCommand adicaoCommand = new AdicaoCommand(3.0, 2.0);

        // Act
        double resultado = adicaoCommand.execute();

        // Assert
        assertEquals(5.0, resultado, 0.0001); // Considerando uma precis√£o de 0.0001 para compara√ß√£o de n√∫meros de ponto flutuante
    }
}
```

Note como n√£o usamos mocks. 

Mas voc√™ deve estar se perguntando: vale √† pena escrever um teste para essa classe `AdicaoComando` sendo ela t√£o simples? SIM, vale! Lembre-se que testes tamb√©m existem para prevenirem erros futuros. 

Imagine que no futuro, sem querer, algu√©m altera nossa classe `AdicaoComando`:

```java
public record AdicaoComando(double a, double b) {

public int execute() {
  return Calculadora.realizarOperacao(this.a, this.a, OperacaoAritmetica.ADICAO);
}

}
```

Erro simples, mas que sem testes, poderia passar sem percebemos. Voc√™ percebeu o erro acima? üòÜ

### Mas eu preciso escrever testes de unidade para todas as classes?

N√£o. Lembre-se, √© importante que testes sejam f√°ceis e efetivos. Testes de unidade n√£o s√£o √≥timos para testar classes que interagem com componentes externos ao seu sistema ou que haja depend√™ncia do seu framework. Por exemplo, no nosso *controller* abaixo:

```java
@RestController
@RequestMapping("/api")
@Validated
public class ExemploController {

    @PostMapping("/exemplo")
    @ResponseStatus(HttpStatus.CREATED)
    public String criarExemplo(@Valid @RequestBody ExemploRequest exemploRequest) {
        // L√≥gica de processamento aqui
        return "Exemplo criado com sucesso!";
    }
}
```

Note como a nossa *request* √© validada atrav√©s do *Spring* usando as anota√ß√µes `@Validated` e `@Valid`. Nesse caso, um teste de unidade n√£o faz um bom trabalho para exercitar esse cen√°rio de valida√ß√£o. 

Como regra geral, eu gosto de usar testes de unidade para validar algoritmos internos da minha aplica√ß√£o, por exemplo, uma regra de neg√≥cio que n√£o depende do framework e nem de uso do banco de dados. No nosso exemplo acima, testar o switch/case da calculadora √© um excelente candidato para testes de unidade, da mesma forma, a nossa classe `AdicaoComando`. 

Mas se testes de unidade n√£o s√£o suficientes? O que podemos fazer a respeito? √â aqui que entram os testes de integra√ß√£o.

## Testes de integra√ß√£o

Nos testes de integra√ß√£o (tamb√©m chamados de Testes de Servi√ßo no livro *Building Microservices*), n√≥s come√ßamos a usar as nossas classes trabalhando em conjunto com outros componentes: *frameworks*, banco de dados, filas de comunica√ß√£o, etc. Mais importante ainda, n√≥s subimos a nossa aplica√ß√£o em um servidor que os nossos testes v√£o invocar.

![Diagrama com um teste de integra√ß√£o invocando um servi√ßo e suas depend√™ncias.](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgtxv83hxz476hzrmld.png)

### Por que precisamos de testes de integra√ß√£o?

Como voc√™ deve ter percebido, os testes de unidade s√£o bem restritos. Eles n√£o cobrem nossas valida√ß√µes e funcionalidades criadas pelos nossos *frameworks*, nem restri√ß√µes impostas pelos nossos protocolos de comunica√ß√£o ou estruturas de armazenamento. Com o uso de testes de integra√ß√£o, n√≥s conseguimos cobrir todos esses cen√°rios extras, j√° que com testes de integra√ß√£o rodamos a nossa aplica√ß√£o como parte dos testes.

### Mas como eu escrevo testes de integra√ß√£o?

Felizmente, os *frameworks* modernos j√° cont√©m ferramentas que nos permitem escrever testes de integra√ß√£o de uma forma muito pr√≥xima de como escrevemos testes de unidade. Por exemplo, para testar o nosso *controller* do exemplo anterior, n√≥s poder√≠amos utilizar o pr√≥prio *Spring* e sua anota√ß√£o `@SpringBootTest`: 

```java
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class ExemploControllerTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void criarExemplo_QuandoIdadeMenorQue18_DeveRetornarBadRequest() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        String requestBody = "{\"idade\": 17}";
        HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<String> response = restTemplate.exchange("/api/exemplo", HttpMethod.POST, requestEntity, String.class);

        assertEquals(400, response.getStatusCodeValue());
        assertEquals("A idade deve ser no m√≠nimo 18", response.getBody());
    }

    // Outros testes semelhantes para os diferentes cen√°rios
}
```

Como esse teste atrav√©s da anota√ß√£o `@SpringBootTest` sobe a aplica√ß√£o real tal qual ela rodando em produ√ß√£o, √© poss√≠vel validarmos como o *Spring* valida utilizando as anota√ß√µes `@Valid` e `@Validated`.

### Eu n√£o trabalho com *Spring*. Uso um framework da casa e/ou outra ferramenta de nuvem como `AWS Lambda`. Como posso escrever testes de integra√ß√£o?

√â poss√≠vel escrever testes de integra√ß√£o para aplica√ß√µes que rodam sem um framework de apoio. Vamos aos exemplos:

Primeiro, vamos escrever a mesma aplica√ß√£o do *controller* acima, mas usando apenas Java padr√£o:

```java
public class IdadeValidationServer {

    public static void main(String[] args) throws IOException {
        // Cria√ß√£o de um servidor HTTP na porta 8080
        HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);

        // Criando um contexto para lidar com solicita√ß√µes no caminho "/validarIdade"
        server.createContext("/validarIdade", new IdadeValidationHandler());

        // Iniciando o servidor
        server.start();
    }

    // Implementa√ß√£o do manipulador (handler) para o caminho "/validarIdade"
    static class IdadeValidationHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Obtendo a solicita√ß√£o do corpo
            String requestBody = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);

            // Realizando a valida√ß√£o de idade
            int idade = Integer.parseInt(requestBody.trim());
            String response = validarIdade(idade) ? "Permitido" : "Proibido";

            // Configurando cabe√ßalhos de resposta
            exchange.getResponseHeaders().set("Content-Type", "text/plain");
            exchange.sendResponseHeaders(200, response.length());

            // Enviando a resposta
            try (OutputStream os = exchange.getResponseBody()) {
                os.write(response.getBytes(StandardCharsets.UTF_8));
            }
        }

        // Fun√ß√£o de valida√ß√£o de idade
        private boolean validarIdade(int idade) {
            // Simulando a valida√ß√£o
            return idade >= 18;
        }
    }
}
```

Obviamente, nosso c√≥digo √© muito maior (a solu√ß√£o acima √© apenas um exemplo e n√£o √© adequada para uso em produ√ß√£o, voc√™ foi avisado(a) üò¨). E como diabo eu testo isso?

Primeiro, voc√™ precisa rodar o servidor. Voc√™ pode fazer isso na sua IDE de escolha ou usar o java para rodar a aplica√ß√£o. 

```
# Compila o .java
javac IdadeValidationServer.java
# Executa o .class gerado. O servidor deve estar rodando na porta 8080. Use ctrl+c para interromper a execu√ß√£o.
java IdadeValidationServer 
```

E agora podemos escrever o teste:
 
```java
class IdadeValidationServerTest {

    @Test
    void testIdadeValidationServer() throws IOException {

        // Faz uma solicita√ß√£o HTTP para validar a idade (altere a idade conforme necess√°rio)
        int idade = 20;
        URL url = new URL("http://localhost:8080/validarIdade");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);

        connection.getOutputStream().write(Integer.toString(idade).getBytes());

        // L√™ a resposta do servidor
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String response = reader.readLine();
        reader.close();

        // Para os prop√≥sitos deste exemplo, esperamos que a resposta seja "Permitido"
        assertEquals("Permitido", response);

        // Fecha a conex√£o e desliga o servidor
        connection.disconnect();
    }
}
``` 

Tamb√©m √© poss√≠vel executar o pr√≥prio servidor a partir do teste. Basta adicionar:

```java
...
    @Test
    void testIdadeValidationServer() throws IOException {
        // Inicia o servidor (pode ser feito automaticamente usando algo como o JUnit5 extensions)
        IdadeValidationServer.startServer();
// C√≥digo de teste
        IdadeValidationServer.stop();
}
```

Eu j√° trabalhei em ambientes onde n√£o era poss√≠vel executar o servidor como parte integrada dos testes. Por isso, achei importante mostrar as duas formas.

Agora que temos um exemplo sem framework, e se eu quiser, por exemplo, testar uma aplica√ß√£o rodando no `AWS Lambda` ou no `AWS Step Functions`? Na minha experi√™ncia, o desafio est√° em simular o ambiente. C√≥digo que roda *"serverless"* no cloud se beneficia bastante de testarmos o c√≥digo justamente onde ele √© executado em produ√ß√£o, lembre-se, testes devem ser *efetivos*. Essa diferen√ßa tem por consequ√™ncia que antes de executarmos nossos testes, n√≥s precisamos fazer *deploy* do c√≥digo para o cloud, por exemplo, uma conta AWS do desenvolvedor. Ap√≥s feito o *deploy*, n√≥s podemos invocar o c√≥digo usando a API do AWS ou chamadas HTTP se o nosso lambda estiver usando um HTTP endpoint.

```java
public class LambdaIntegrationTest {

    @Test
    public void testLambdaInvocation() {
        // Configure a client
        LambdaClient lambdaClient = LambdaClient.create();

        // Configurar a solicita√ß√£o de invoca√ß√£o
        InvokeRequest invokeRequest = InvokeRequest.builder()
                .functionName("nome-da-sua-funcao-lambda")
                .build();

        // Chamar a fun√ß√£o Lambda
        InvokeResponse invokeResponse = lambdaClient.invoke(invokeRequest);

        // Verificar a resposta
        String responseBody = StandardCharsets.UTF_8.decode(invokeResponse.payload()).toString();
        assertEquals("Hello, World!", responseBody);

        // Fechar o cliente
        lambdaClient.close();
    }
}
```
Tamb√©m √© poss√≠vel usar ferramentas que simulam o cloud em sua m√°quina local. Eu n√£o tenho muita experi√™ncia com esse tipo de solu√ß√£o, mas posso inferir que se ganha agilidade e custo em troca de acur√°cia, dado que por mais perfeito que o ambiente local seja, ele n√£o √© igual ao ambiente de nuvem. 


### E as depend√™ncias? Como eu fa√ßo pra executar testes de integra√ß√£o com depend√™ncias?

Aqui existem algumas op√ß√µes:
1. Voc√™ pode usar stubs/mocks para suas depend√™ncias de fora do seu dom√≠nio.
2. Voc√™ pode usar suas depend√™ncias reais, especialmente se forem opera√ß√µes s√≥ de leitura (Lembre-se que testes precisam ser f√°ceis de serem escritos). 
3. Voc√™ pode subir servidores que simulam suas depend√™ncia. Uma vers√£o mais rebuscada dos mocks.

O importante √© que essa decis√£o n√£o comprometa a velocidade de execu√ß√£o e a confiabilidade dos seus testes. Foque em escrever testes efetivos que exercitam o comportamento que voc√™ est√° buscando.

### Mas executar o teste na nuvem n√£o seria um teste *end-to-end (e2e)*?

Depende ü§†. Se a sua aplica√ß√£o envolve apenas o lambda e alguns outros servi√ßos da AWS, eu considero que isso ainda √© um teste de integra√ß√£o. A diferen√ßa √© que em vez do *Spring*, n√≥s temos o lambda como suporte de execu√ß√£o da nossa aplica√ß√£o. 

Na minha opini√£o, a diferen√ßa entre um teste de integra√ß√£o de um teste e2e √© a quantidade de sistemas envolvidos e a quantidade de contextos de neg√≥cio. Se o teste se mant√©m restrito a um contexto de neg√≥cio, que envolve apenas o seu time direto e um servi√ßo, eu ainda considero que estamos falando de um teste de integra√ß√£o, independente se ele roda em container, em lambda, na m√°quina local.

### Mas se testes de integra√ß√£o s√£o t√£o bacanas, por que precisamos de testes de unidade?

Em aplica√ß√µes simples, com poucas regras de neg√≥cio, onde o foco √© salvar os dados no banco de dados, ou levar o dado de entrada at√© o local de sa√≠da, os testes de integra√ß√£o brilham. Existem at√© modelos de testes que focam em testes de integra√ß√£o, como o modelo *honeycomb* ou com√©ia.

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3z7duttme7nn5a5sqdl.png)

Por√©m, tudo depende do contexto. Se voc√™ tem uma classe como a nossa calculadora com m√©todos simples, √© exaustivo levantar todo o contexto do *Spring* s√≥ para validar que as 4 opera√ß√µes s√£o efetuadas com sucesso. Nesse caso, √© melhor escrever testes de unidade para validar o neg√≥cio e focar os testes de integra√ß√£o nas intera√ß√µes com banco de dados, servidores, *frameworks*.

Em um dos meus projetos recentes, estive envolvido com trabalhos que processam dados de entrada A, realizam uma computa√ß√£o m√≠nima e armazenam os resultados na sa√≠da B. Nesse contexto, eu prefiro utilizar testes de integra√ß√£o. Por qu√™? √â mais importante verificar que o dado transita com sucesso ao longo do fluxo, que o *Spring* injetou os objetos corretos, que a sa√≠da foi a esperada do que verificar a l√≥gica interna do neg√≥cio que √© m√≠nima.

Os testes de unidade, eu uso apenas para detalhar algumas decis√µes e fluxos internos que n√£o valem √† pena serem escritas como testes de integra√ß√£o por serem um pouco mais dif√≠ceis de escrever e mais lentos de executar.

## Testes end-to-end ou e2e

![V√°rios testes e2e testam a aplica√ß√£o como um todo](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dk40gki46pnj1hozcvy.png)

Quando eu me refiro √† testes e2e, normalmente a requisi√ß√£o √© enviada a um (ou v√°rios) servidor de aplica√ß√£o. Aqui a aplica√ß√£o se comunica com todas as depend√™ncias tal qual seria em ambiente de produ√ß√£o.

N√£o √© incomum encontrar testes desse tipo exercitando a pr√≥pria UI. Embora, eu admito que nunca trabalhei nessa situa√ß√£o dado que o meu contexto √© mais no *backend*.

Normalmente, eu recomendo escrever poucos desses testes. Com todas essas depend√™ncias, o teste √© mais dif√≠cil de escrever e muitas vezes quando h√° uma falha a causa n√£o √© expl√≠cita, gerando os famosos *testes inst√°veis*.

> "Teste flaky" (ou "teste inst√°vel") refere-se a um tipo de teste automatizado que pode produzir resultados inconsistentes ou imprevis√≠veis, mesmo quando aplicado ao mesmo c√≥digo sob condi√ß√µes id√™nticas.

No geral, eu tento escrever o caso feliz da aplica√ß√£o e modelar testes *e2e* em cima deles. O objetivo √© validar  se os testes e2e falharem, uma regress√£o foi inserida pelo meu time OU por times de depend√™ncia. Esses testes tamb√©m s√£o √≥timos para servirem de modelo para testes de fuma√ßa. 

### Por que apenas poucos testes e2e?

Testes e2e s√£o dif√≠ceis de escrever e muitas vezes acabam n√£o sendo muito efetivos como diagn√≥stico j√° que eles possuem muitos pontos de falha.

## Can√°rios

Os can√°rios s√£o muito usados como monitoramento. Na minha experi√™ncia, eles compreendem um *subset* dos testes funcionais para serem executados rapidamente. O objetivo aqui √© usar os testes e2e como gerador de tr√°fego para a aplica√ß√£o em um ambiente similar a produ√ß√£o. Dessa forma, podemos monitorar as m√©tricas da aplica√ß√£o e reverter nossas mudan√ßas caso haja um problema no ambiente ap√≥s a implanta√ß√£o de uma nova funcionalidade.

![Os can√°rios usam os testes e2e para gerar tr√°fego para a aplica√ß√£o.](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x78n7t245otxuctmc3vc.png)
> Os can√°rios usam os testes e2e para gerar tr√°fego para a aplica√ß√£o
 
## Testes de can√°rio

O termo √© parecido com o can√°rio, mas o objetivo aqui √© outro. Essa estrat√©gia de *release* permite fazermos implanta√ß√£o da funcionalidade nova em uma pequena parcela dos nossos servidores. A partir da√≠, monitoramos esses servidores a fim de verificar se houve altera√ß√µes nas m√©tricas da aplica√ß√£o. Caso haja altera√ß√£o nas m√©tricas, n√≥s interrompemos o *release* da funcionalidade, evitando um impacto maior aos nossos usu√°rios.

## Mas que testes devo usar?

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbskl03k9l915cegm1qz.jpg)

A resposta cl√°ssica seria depende üòé, mas para n√£o deixar voc√™ que veio at√© aqui de m√£o abanando eu vou tentar dar um direcionamento.

1. Use testes de unidade em classes que implementam algoritmos ou fluxos decis√≥rios que rodam independentemente da infraestrutura ou *frameworks* de sua aplica√ß√£o. Favore√ßa esses testes de sua aplica√ß√£o tem um dom√≠nio rico, cheio de regras e c√°lculos de neg√≥cio. 
2. Use testes de integra√ß√£o para exercitar tudo que toca sua infraestrutura ou framework. Esses testes s√£o excelentes para exercitar funcionalidades implementadas com seus *frameworks* ou com sua infraestrutura, por exemplo, *constraints* no seu banco de dados ou requisi√ß√µes HTTP.
3. Use testes e2e para validar cen√°rios b√°sicos de sua aplica√ß√£o, de prefer√™ncia, use-os como can√°rios e os associe a mecanismos de *retry* onde caso haja uma falha, o time tem uma boa seguran√ßa que algo est√° errado.

## Conclus√£o

Testes s√£o um assunto fabuloso e geram bons debates na comunidade. Mais importante do que ficar cravando regra que uma aplica√ß√£o precisa ter 100x testes de unidade, 10x testes de integra√ß√£o e 1x testes e2e √© entender qual o contexto daquela aplica√ß√£o e pensar de forma estrat√©gica quais os melhores testes que se ad√©quam aquele contexto.

Por fim, eu deixo aqui uma cita√ß√£o do maravilhoso livro do Maur√≠cio Aniche "Effective Software Testing", pg 17.

> N√£o existe bala de prata em teste de software. Em outras palavras, n√£o h√° uma √∫nica t√©cnica de teste que voc√™ possa sempre aplicar para encontrar todos os poss√≠veis bugs. Diferentes t√©cnicas de teste ajudam a revelar diferentes bugs. Se voc√™ usar apenas uma t√©cnica, pode encontrar todos os bugs poss√≠veis com essa t√©cnica e mais nenhum.
...
Isso √© conhecido como o paradoxo do pesticida: cada m√©todo que voc√™ usa para prevenir ou encontrar bugs deixa um res√≠duo de bugs mais sutis contra os quais esses m√©todos s√£o ineficazes. Os testadores devem usar diferentes estrat√©gias de teste para minimizar o n√∫mero de bugs deixados no software.

![Mind blowing](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vnabh6p78fu39qrtf61.gif)

Eu recomendo demais voc√™s lerem o livro do Aniche se voc√™s curtem esse assunto. √â isso, espero que voc√™s tenham curtido o post e at√© a pr√≥xima.