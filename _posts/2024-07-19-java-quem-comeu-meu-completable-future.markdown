---
title: "Java: Quem comeu o meu CompletableFuture?"
published: true
description: Post curtinho sobre onde CompletableFuture s√£o executados. 
tags: #java #thread #concurrency #completableFuture
# cover_image: https://direct_url_to_image.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2024-07-19 18:13 +0000
---

O `CompletableFuture` √© uma classe do Java que faz parte do pacote `java.util.concurrent` e √© utilizada para trabalhar com programa√ß√£o ass√≠ncrona. Ele permite que voc√™ execute tarefas de forma ass√≠ncrona e, posteriormente, combine os resultados dessas tarefas ou execute a√ß√µes adicionais quando elas forem conclu√≠das. Com `CompletableFuture`, voc√™ pode encadear v√°rias opera√ß√µes ass√≠ncronas, lidar com exce√ß√µes e combinar m√∫ltiplas tarefas de maneira eficiente. Isso √© particularmente √∫til em aplica√ß√µes que precisam realizar opera√ß√µes demoradas, como chamadas a APIs externas ou processamento de dados intensivo, sem bloquear a thread principal.

## Olhando a API üëÄ

Se olharmos a API de `CompletableFuture` n√≥s vamos perceber algo bem curioso. Uma porrada dos m√©todos tem 3 vers√µes, por exemplo:
1. thenApply(Function<? super T,? extends U> fn)
2. thenApplyAsync(Function<? super T,? extends U> fn)
3. 
thenApplyAsync(Function<? super T,? extends U> fn, Executor executor)

Voc√™ sabia que dependendo do m√©todo que voc√™ encadear o seu `CompletableFuture` ele vai executar em um thread-pool completamente diferente? Vamos aos exemplos...

## Execu√ß√£o na mesma thread de invoca√ß√£o

```java
class Scratch {
    public static void main(String[] args) {
       mainThread();
    }

    public static void mainThread() {
        CompletableFuture<String> future = CompletableFuture.completedFuture("Hello World!");

        // thenApply is executed in the main thread
        String result = future.thenApply(s -> {
            System.out.println("ThenApply: " + Thread.currentThread().getName());
            return s + " World";
        }).join();  // join is used to wait for the future to complete
        System.out.println(result);
    }
}
```

Se rodarmos o exemplo acima veremos que o nosso `Hello World!` √© executado na mesma thread que invocou o `CompletableFuture`, a `main-thread`. Por qu√™? Porque usamos o mesmo `thenApply` sem usarmos a vers√£o async que executa em outras thread-pools.

## Execu√ß√£o no ForkJoinPool

Agora, o que acontece se usarmos a segunda vers√£o?

```java
class Scratch {
    public static void main(String[] args) {
       forkJoinPool();
    }

    public static void forkJoinPool() {
        CompletableFuture<String> future = CompletableFuture.completedFuture("Hello World!");

        // thenApply is executed in the main thread
        String result = future.thenApplyAsync(s -> {
            System.out.println("ThenApply: " + Thread.currentThread().getName());
            return s + " World";
        }).join();  // join is used to wait for the future to complete
        System.out.println(result);
    }
}
```

Note que ao executarmos com a vers√£o `async` o `CompletableFuture` √© executado no `ForkJoinPool`. Se voc√™ leu meus artigos anteriores sobre Paralelismo voc√™ deve estar familiarizada(o) com o `ForkJoinPool`. 

## Execu√ß√£o em um custom executor

Finalmente, a √∫ltima vers√£o nos permite passar um executor de nossa escolha. Essa √© minha vers√£o favorita j√° que me permite maior controle sobre minha aplica√ß√£o.

```java
class Scratch {
    public static void main(String[] args) {
        customPool();
    }

    public static void customPool() {
        final ExecutorService executorService = Executors.newFixedThreadPool(2);
        CompletableFuture<String> future = CompletableFuture.completedFuture("Hello World!");

        // thenApply is executed in the main thread
        String result = future.thenApplyAsync(s -> {
            System.out.println("ThenApply: " + Thread.currentThread().getName());
            return s + " World";
        }, executorService).join();  // join is used to wait for the future to complete
        System.out.println(result);
    }

}
```

## Sum√°rio

Nesse pequeno post aprendemos as diversas maneiras que um `CompletableFuture`. Conhec√™-las √© extremamente √∫til pra evitar surpresas, como recentemente eu enfrentei ao executar meu `CompletableFuture` com um `thenApply` e achar estranho a thread que tava executando aquele c√≥digo.

Esse post √© curtinho, espero que voc√™s curtam esse formato! Happy coding üíª.