---
title: "Paralelismo e Concorr√™ncia 101: Conceitos"
published: true
description: Vamos explorar conceitos de paralelismo e concorr√™ncia.
tags: #java #concurrency #parallelism #ptbr
# cover_image: https://direct_url_to_image.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2024-06-16 19:13 +0000
---

> O termo 101 √© usado aqui nos US para denotar algo para iniciantes e quem t√° come√ßando. √â comum as primeiras disciplinas na faculdade serem <t√≥pico 101>.

Recentemente, tenho escrito bastante no X sobre alguns aprendizados que tive lidando com programa√ß√£o concorrente em Java.

Este post √© o primeiro de uma s√©rie para documentar o que aprendi neste per√≠odo. O assunto √© extenso, repleto de nuances e "dependes". √â bom come√ßarmos com a base para termos uma terminologia comum. Vamos l√°?

## Concorr√™ncia e Paralelismo

**Concorr√™ncia** refere-se √† capacidade de um sistema de lidar com m√∫ltiplas tarefas ao mesmo tempo. N√£o significa necessariamente que essas tarefas est√£o sendo executadas simultaneamente, mas sim que o sistema pode trocar rapidamente entre as tarefas, de modo que parece que est√£o ocorrendo ao mesmo tempo. Um exemplo de concorr√™ncia √© como o seu SO troca o tempo de CPU entre diversos programas. Isso d√° a impress√£o que todos eles est√£o executando ao mesmo tempo (talvez estejam se voc√™ tiver v√°rios "cores"), mas, na verdade, a sua CPU s√≥ √© MUITO r√°pida entre trocar quem tem a vez na CPU.

Paralelismo, por outro lado, refere-se √† execu√ß√£o simult√¢nea de v√°rias tarefas. Isso requer m√∫ltiplos n√∫cleos de CPU, onde cada n√∫cleo pode executar uma tarefa diferente ao mesmo tempo. O paralelismo √© sobre fazer v√°rias coisas ao mesmo tempo. Um exemplo seria no caso que voc√™ est√° executando os diversos programas acima e eles realmente est√£o rodando em paralelo, cada um roda isoladamente na sua pr√≥pria CPU ou core sem precisar "ceder" a vez. 

<figure>
  <img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/liy4nb34fxlz22pucrf9.png" alt="Processo concorrente vs paralelo"/>
  <figcaption>*Processamento concorrente vs paralelo. Fonte: Baeldung CS.*</figcaption>
</figure>

Observe no exemplo acima como a CPU salta de task em task no processamento concorrente. Isso √© feito t√£o r√°pido que d√° a sensa√ß√£o que as tasks s√£o executadas ao mesmo tempo.

J√° no processamento paralelo, cada core √© respons√°vel por um task e essas tasks realmente acontecem ao mesmo tempo. 

As aplica√ß√µes podem ser: 
1. Nem concorrentes e nem paralelas.
2. Concorrentes, mas n√£o paralelas.
3. Paralelas, mas n√£o concorrentes.
4. Concorrentes e paralelas.

#### N√£o-concorrentes e n√£o-paralelas

Imagina o seu programa que roda sequencial em uma √∫nica thread. Cada comando √© executado em sequ√™ncia at√© seu final.

#### Concorrentes e n√£o-paralelas

Uma aplica√ß√£o pode ser concorrente sem ser paralela. Isso significa que ela pode gerenciar e trocar rapidamente entre v√°rias tarefas, mas n√£o as executa simultaneamente.

Exemplo:
Um sistema de tempo compartilhado em um √∫nico n√∫cleo de CPU. Aqui, o sistema operacional alterna entre diferentes tarefas t√£o rapidamente que parece que todas est√£o sendo executadas ao mesmo tempo. Na realidade, o processador est√° executando apenas uma tarefa por vez.

#### N√£o-concorrentes e paralelas

Uma aplica√ß√£o pode ser paralela sem ser concorrente. Isso significa que ela executa v√°rias tarefas simultaneamente, mas essas tarefas n√£o s√£o gerenciadas de forma que possam cooperar ou competir pelo mesmo recurso.

Exemplo:
Uma aplica√ß√£o que realiza c√°lculos massivamente paralelos em um cluster de computadores, onde cada n√≥ do cluster est√° executando um c√°lculo diferente de forma independente. N√£o h√° intera√ß√£o entre as tarefas enquanto elas est√£o sendo executadas.

#### Concorrentes e paralelas

Uma aplica√ß√£o pode ser concorrente e paralela ao mesmo tempo. Isso significa que ela n√£o s√≥ gerencia v√°rias tarefas ao mesmo tempo, mas tamb√©m executa algumas delas simultaneamente em m√∫ltiplos n√∫cleos ou processadores.

Exemplo:
Um servidor web que atende v√°rias requisi√ß√µes de clientes. Ele pode utilizar threads para gerenciar v√°rias requisi√ß√µes ao mesmo tempo quando ele est√° ocupado fazendo IO e, se estiver rodando em um sistema multi-core, ele pode processar v√°rias dessas requisi√ß√µes simultaneamente (paralelismo).

### Benef√≠cios

O exemplo cl√°ssico de benef√≠cio da concorr√™ncia √© sua CPU poder trabalhar em alguma coisa enquanto a tarefa que ela estava executando espera algum outro recurso. Por exemplo, imagine que voc√™ est√° fazendo download de dados pela rede. Grande parte do trabalho ali √© de IO (input/output) e n√£o precisa da CPU. Nesse meio tempo, em vez de ficar esperando, a CPU pode pular pra outra tarefa.

<figure>
  <img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztbdcjd5eymaczc0h4sg.png" alt="Processamento concorrente vs IO"/>
  <figcaption>*CPU alterna entre tarefas enquanto espera IO. Fonte: Baeldung CS.*</figcaption>
</figure>

No caso do paralelismo, o benef√≠cio √© mais direto. Se eu tenho 10 tarefas, em vez de execut√°-las 1 por vez, eu posso executar N tarefas onde N √© o n√∫mero de cores da minha CPU.

üò£ cansativo, mas bacana n√©? Calma que ainda tem mais...

## IO vs CPU intensivo

Quando a gente lida com concorr√™ncia e paralelismo, √© sempre importante entendermos se a nossa tarefa √© *IO intensiva* ou * CPU intensiva*. 

Uma opera√ß√£o *IO intensiva* normalmente vai ser limitada pela velocidade de entrada e sa√≠da do sistema. Por exemplo, consumir dados de um microservi√ßo, salvar um arquivo em disco, se comunicar com o banco de dados.

J√° uma opera√ß√£o *CPU intensiva* vai ser limitada pela velocidade de c√°lculo e processamento da CPU. Exemplos: Realizar c√°lculos matem√°ticos, transformar dados durante uma chamada de servi√ßo, o banco de dados processar uma query de leitura.

#### E o que *CPU intensiva* e *IO intensiva* tem a ver com concorr√™ncia e paralelismo?

Se a sua aplica√ß√£o √© bem *IO intensiva* ela vai se beneficiar bastante da capacidade de usar concorr√™ncia. Assim toda vez que sua aplica√ß√£o estiver usando os dispositivos de entrada/sa√≠da a CPU pode trocar o contexto pra ir fazer outra coisa.

<figure>
  <img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lgrq5gm7cktfbrk2zjt.png" alt="IO bound"/>
  <figcaption>*Tarefa IO intesiva. Fonte: leimao.github.io*</figcaption>
</figure>

J√° se sua aplica√ß√£o √© *CPU intensiva*, concorr√™ncia n√£o vai te ajudar muito. Por qu√™? Oras, o seu c√°lculo precisa da CPU pra terminar. Se h√° uma troca de contexto, o c√°lculo para at√© o contexto voltar pra sua aplica√ß√£o. Por√©m, voc√™ se beneficia muito de paralelismo, porque cada c√°lculo pode ser executado sem parada no seu pr√≥prio n√∫cleo. Quanto mais n√∫cleos, mais execu√ß√µes podemos fazer ao mesmo tempo.

<figure>
  <img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/241en8elo5a505canvn8.png" alt="CPU bound"/>
  <figcaption>*Tarefa CPU intesiva. Fonte: leimao.github.io*</figcaption>
</figure>

## E agora?

Se voc√™ chegou at√© aqui, parab√©ns üòâ! N√£o rolou muito c√≥digo nesse artigo porque todo o c√≥digo depende muito de onde ele est√° sendo executado pra gente definir se ele √© concorrente e/ou paralelo.

Os conceitos acima s√£o bem legais e bem importantes para as pr√≥ximas li√ß√µes. Durante muito tempo eu n√£o entendia o que eram atividades "IO intensiva" ü§ì. Saber esses fundamentos te ajuda, por exemplo, a ter uma ideia do n√∫mero de threads que voc√™ quer usar e/ou se voc√™ deveria usar um `parallelStream()` ou um `thread pool`. Mas isso s√£o t√≥picos para o pr√≥ximo cap√≠tulo!

Se curtiu, d√° o joinha e manda uma pergunta pra gente responder em breve. Happy coding! üíª

p.s. Quando eu estava para publicar esse texto eu percebi que o mestre fidelissauro tem uma vers√£o SUPER completa sobre o assunto. Coloquei o link nas refer√™ncias.


## Refer√™ncias

* https://leimao.github.io/blog/Python-Concurrency-High-Level/
* https://www.baeldung.com/cs/concurrency-vs-parallelism#:~:text=Simultaneously%20executing%20processes%20and%20threads,terms%20for%20the%20parallelism%20taxonomy.
* https://medium.com/@peterlee2068/concurrency-and-parallelism-in-java-f625bc9b0ca4
* https://fidelissauro.dev/concorrencia-paralelismo/
