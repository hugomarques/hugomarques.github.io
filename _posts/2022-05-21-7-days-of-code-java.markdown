---
layout: post
title: 7 Days of Code - Java
published: true
description:
tags: java, iniciante, 7daysofcode, OO
cover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hxawn5gsmzyf8omfuxa.png
---

Nesse post eu vou compartilhar a minha jornada no [7daysofcode](7daysofcode.io).

A id√©ia do 7 days of code √© receber um email todo dia com uma pequena tarefa pra ser executada na linguagem escolhida para o desafio. No meu caso, eu decidi fazer a vers√£o em Java.

Nesse post eu vou descrever as minhas dificuldades, pensamentos, aprendizados e tentar compartilhar um pouco como eu resolvo problemas. Vamos l√°!

## Dia 1 - Chamando uma API
O problema come√ßa de forma bem direta. Invocar a API do IMDB e obter um JSON com os 250 filmes mais populares. Eu tentei manter a coisa toda o mais simples poss√≠vel, o c√≥digo todo dentro de um √∫nica classe e um √∫nico m√©todo `main` embora o meu instinto tente me guiar para encapsular os objetos em classes. Eu literalmente falei para mim mesmo *"Keep it simple"*.

A URL no email do desafio estava errada. A URL que eu recebi era `https://imdb-api.com/en/API/Top250Movies/<apiKey>https://imdb-api.com/en/API/Top250Movies/`. Algu√©m mais experiente vai bater o olho e ver o `https//` concatenando √† `<apiKey>` e vai notar o erro. A URL correta √© `https://imdb-api.com/en/API/Top250Movies/<apiKey>`, onde <apiKey> deve ser substitu√≠da pelo key gerada para voc√™.

> **Dica:** Em vez de escrever a chave do IMDB que voc√™ criou no c√≥digo e apagar ela toda vez que for postar o c√≥digo no github (voc√™ n√£o vai querer as pessoas tendo acesso √† sua chave), voc√™ pode armazen√°-la em uma vari√°vel de ambiente.
√â assim, por exemplo, que voc√™ pode obter alguns valores quando voc√™ executa c√≥digo no ambiente do AWS Lambda. **Nunca escreva suas keys diretamente no c√≥digo**, uma hora voc√™ vai esquecer, dar um commit e sua m√°quina no AWS vai ser usada pra minerar bitcoins.

## Dia 2 - Fazer parse do JSON
Naturalmente eu acho mais f√°cil correr pro OO pra modelar cada filme mas eu me decidi seguir o desafio e me manter focado no que era pedido cada dia.

Mesmo depois de 14 anos de carreira, regex AINDA s√£o confusas. Eu precisei pesquisar BASTANTE pra lembrar como extrair grupos e obter informa√ß√£o entre dois caracteres.

Inicialmente eu tinha pensando em extrair todos os atributos de uma vez e armazen√°-los em um `Map<Map<Atributo, Valor>>`. Eu desisti dessa id√©ia por ser ligeiramente mais complicada e optei por manter o c√≥digo simples.
```Java
List<titles> titles = parseTitle(moviesJson);
```
A API de Matcher tamb√©m me fez perder um tempo. Depois de chamar o m√©todo `matcher` se voc√™ n√£o utilizar `.find()` ou `.match()` o m√©todo `.group(0)`vai retornar. Um exemplo de uso:
```Java
var matcher = Pattern.compile("\""+attribute+"\":\"(.*?)\"").matcher(movie);
    matcher.find(); //precisa chamar .find() antes de group()
    return matcher.group(1);
```

Foi importante em alguns casos entender o conceito de regex greedy vs non-greedy e quando usar a express√£o `(.*)` vs `(.*?)`. Os resultados podem ser bem diferentes.

> **Dica**: Eu acabei escrevendo o m√©todo parseAttribute por pregui√ßa de ficar duplicando c√≥digo nos m√©todos, o que no final √© uma boa pr√°tica (DRY). Ou seja, quando voc√™ notar que vai fazer muito da mesma coisa e ficar com pregui√ßa... pense se aquilo n√£o pode ser abstra√≠do.

## Dia 3 - Modelagem de dom√≠nio com OO
Hora de modelar OO, s√≥ de ler o desafio eu j√° dei um respiro por estar na minha zona de conforto.

Eu fiz o desafio em uns 10 min onde uns 7 min foi usando atalhos do intelliJ pra gerar getters, toString, equals and hashCode e o resto copiando o c√≥digo do `Main.java` para o novo `Movie.java`.

Algumas decis√µes:
1. Movies s√£o imut√°veis. Depois de instanciados eles n√£o podem ser alterados.
2. Eu gosto de usar static factory methods (effectiva java item #1), ent√£o pra mim foi natural criar o m√©todo `instanceOf`.
3. Stream API faz a opera√ß√£o inteira ficar mais enxuta. Em vez de:
```Java
var movies = new Arraylist<Movie>();
for each(String movieString:moviesAsJson) {
  movies.add(Movie.instanceOf(movieString);
}
```

N√≥s podemos fazer:
```Java
final var movies = moviesJson.stream()
            .map(Movie::instanceOf)
            .collect(Collectors.toList());
```

> **Dica**: Note que equals e hashcode n√£o fazem parte do desafio mas eu tenho esse h√°bito de SEMPRE implementar equals e hashcode para os meus objetos de dom√≠nio (Effectiva Java #11).
Eu tamb√©m sempre implemento o toString (Effective Java #12). Mais de uma vez eu vi um problema em produ√ß√£o e eu n√£o conseguia ver a causa porque a pessoa Dev n√£o implementou o toString().

## Dia 4 - Escrevendo HTML
O desafio foi bem direto. Eu gosto do modelo de ter um HTML generator mas fiquei na d√∫vida se isso fosse um projeto "real" se eu manteria o gerador de HTML junto do mesmo objeto que escreve na sa√≠da com o PrintWriter. Talvez sim j√° que o writer em si √© abstrato e pode escrever em diversos canais diferentes.

A parte bacana desse c√≥digo mais uma vez foi decompor o problema usando a API de streams.

```Java
  public void generate(List<Movie> movies) {
    try {
      outputWritter.write(HEAD);
      final var moviesAsHtml = movies.stream().map(HTMLGenerator::fromMovieToMovieHTML).collect(
          Collectors.joining());
      outputWritter.write(String.format(HTML_BODY_TEMPLATE, moviesAsHtml));
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
```

Em resumo a opera√ß√£o acima faz:
1. O map mapeia a Lista de Movie para uma Lista de String.
2. O joining "junta" essa lista de String em uma √∫nica String. Como eu n√£o passei nenhum separador, as Strings s√£o coladas umas nas outras.

> **Dica**: O outro ponto interessante √© o tratamento de exce√ß√µes. Notem que eu encapsulo a checked exception em uma Runtime exception. Por qu√™?
1. Se der erro ali, n√£o tem nada que eu possa fazer. (Effective Java items #70 e #71)
2. Eu n√£o quero exp√¥r esse detalhe para os meus clientes. Imagine que eu tenho 10 classes chamado esse m√©todo e no futuro n√≥s mudamos a exception. Agora n√≥s temos 10 locais quebrados no c√≥digo.

Escrever o HTML e o CSS foi uma dor, faz ANOS que eu escrevi HTML e pra ser sincero eu nunca me senti confort√°vel com isso. Eu espero que isso ajude voc√™ leitor a entender que a √°rea tech √© GIGANTE e voc√™ pode sim ter uma carreira de sucesso sem saber de tudo üôÇ.

## Dia 4 - Extra - Usando auto closeable.

Acabei percebendo que no meu commit eu n√£o fechei o meu writer. Meu primeiro bug ü§≠. Pra corrigir isso vamos usar a feature de auto closing do Java:

```Java
try (var printWriter = new PrintWriter(new FileWriter("movies.html"))) {
  final var htmlGenerator = new HTMLGenerator(printWriter);
  htmlGenerator.generate(movies);
}
```

Pra quem n√£o conhece o c√≥digo acima √© a mesma coisa de fazer:

```Java
try {
  var printWriter = new PrintWriter(new FileWriter("movies.html"))
  final var htmlGenerator = new HTMLGenerator(printWriter);
  htmlGenerator.generate(movies);
} finally {
  printWriter.close();
}
```

Bem mais enxuto, n√©?

## Dia 5 - Mais encapsulamento e c√≥digo limpo

No dia 5 n√≥s estamos fazendo mais encapsulamentos e o nosso main ficou bem bonitinho. A classe tem poqu√≠ssimas depend√™ncias e o m√©todo s√≥ √© respons√°vel pela orquestra√ß√£o da l√≥gica. Algumas decis√µes que eu consigo pensar:
1. Criar o novo objeto pro ImdbClient com a API_TOKEN no construtor faz sentido. Clients normalmente n√£o mudam muito na execu√ß√£o do c√≥digo.
2. J√° o ImdbParser, embora eu possa passar o json no construtor a desvantagem √© que pra cada parsing eu preciso criar um novo parser quando o parser em si √© muito mais uma fun√ß√£o do que um objeto que guarda estado. Uma alternativa seria:
```Java
final var movies = new ImdbJsonParser().parse(responseContent);
```
Assim podemos usar o mesmo parser pra tratar diferentes chamadas da API.

> **Dica**: Mais uma vez eu usei o intelliJ pesado. `alt + ENTER` √© seu atalho amigo, com isso voc√™ cria m√©todos que faltam, classes, corrige os imports, unifica m√∫ltiplos catches em uma express√£o √∫nica. Talvez eu fa√ßa um demo depois sobre como usar esse atalho no intelliJ.

## Dia 6

Criar as abstra√ß√µes para API e para o Parser foi interessante. Eu j√° estava esperando ir nesse caminho. Faz sentido termos uma triple: `<API, Parser, Content>` para cada tipo de content. De fato, eu j√° implementei algo parecido em mais de um sistema que eu trabalhei.

A parte da Marvel foi a mais chata. Eu n√£o consegui entender os requisitos pra saber exatamente qual API exatamente deveria ser chamada. Depois eu fiquei confuso como fazer um Hash MD5 no Java. Eu admito que esses 2 eu olhei a solu√ß√£o final pra me dar um norte pra onde eu devia ir.

Esse m√©todo foi o m√©todo que mais me causou confus√£o no projeto e que eu tiver que ir estudar pra entender o que realmente era feito ali:
```Java
private String md5Hex(String value) {
    try {
      final var messageDigestMD5 = MessageDigest.getInstance("MD5");
      final var digest = new BigInteger(1, messageDigestMD5.digest(value.getBytes(StandardCharsets.UTF_8)));
      return digest.toString(16);
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException(e);
    }
  }
```

Depois foi hora de fazer mais parsing. Dessa vez eu n√£o consegui generalizar t√£o bem quanto a API do Imdb, logo eu deixei as regex em cada m√©todo de parser.

Uma coisa que eu tava incomodado e que aqui fez sentido foi transferir todo o parser pros objetos de parser e deixar os objetos de modelo sem nada relacionado a JSON. √â mais limpo e faz sentido que o modelo n√£o saiba nada sobre o formato do input.

## Dia 7

Li√ß√£o simples mas bacana sobre como usar sort e implementar tanto a interface `Comparable` quanto usar o `Comparator`. Um ponto que n√£o fica claro nos requisitos √©: Quando eu juntar as duas listas, elas devem ser ordenadas usando o que?

Enquanto no Imbd n√≥s usamos o "Rank", na Marvel n√≥s temos o "Rating" e Rating n√£o se traduz como "Nota" mas sim como classifica√ß√£o. Mas tudo bem com isso, √© o tipo de problema que ocorre no trabalho e voc√™ discute com o time pra resolver a ambiguidade.

## Conclus√µes finais

Eu adoro esse tipo de problema/atividade de programa√ß√£o. Me lembra muito a √©poca de faculdade e alguns projetos que fiz durante algumas sele√ß√µes em empresas que n√£o usam "whiteboard questions".

O c√≥digo que eu escrevi [est√° dispon√≠vel no github](https://github.com/hugomarques/7daysofcode-java). Eu coloquei tags em cada commit se voc√™ quiser ver o meu passo-a-passo atrav√©s do desafio.

O que eu mais gostei?
* Eu gostei no foco em abstra√ß√£o mas ainda sim mantendo as coisas simples.
* Eu adorei que come√ßamos j√° chamando uma API externa. √â bem legal come√ßar com algo mais complexo do que um `hello world`.
* Fazer o print pro html foi uma id√©ia bacana para quem gosta de ter algo mais visual.
* A maioria dos dias √© um exerc√≠cio bem pequeno que d√° pra resolver se dedicando 1 hora por dia.

O que eu senti falta?
* Eu acho que faltou 1 dia dedicado a testes. JUnit e testes s√£o parte integrante do Java e teria sido bacana trabalhar com testes pra fazer o parser. Por outro lado, eu entendo que n√£o adicionando testes a gente conseguiu focar s√≥ no Java sem ter que entrar em gerenciamento de depend√™ncias j√° que contr√°rio de linguagens mais modernas, as libs de teste do Java n√£o fazem parte da JDK üò¢.
* No dia 6, eu senti falta dos requisitos mais detalhados e de uma explica√ß√£o sobre aquela API de `md5`. Eu consigo imaginar facilmente algu√©m mais novo perdido nesse dia.
* Tamb√©m teria sido legal ter colocado o exerc√≠cio pra ser invocado do terminal. Eu acho que isso caberia no dia 7 mostrando que o projeto pode ser invocado de diversas fontes e ter diversas `views`. S√≥ uma id√©ia pra uma v2.0 üòó

No geral, eu gostei de todos os dias, quase todos eles eu aprendi algo novo. Eu j√° vinha querendo criar alguns exerc√≠cios em Java pra construir projetos pequenos e exercitar algumas APIs. Esse desafio me mostrou um bom caminho a seguir.

O saldo √© extremamente positivo, √© um respiro ver esse tipo de exerc√≠cio dispon√≠vel pra comunidade exercitar que foge dos tutoriais simples. Uma excelente dose entre *breadth* e *depth*.

Finalmente eu deixo os meus elogios ao pessoal do 7daysofcode.io e ao Paulo como autor dessa vers√£o do exerc√≠cio. Eu vou acabar implementando ele de novo em Scala üôÇ.

Happy coding pessoal üíª!
