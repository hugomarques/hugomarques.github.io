---
layout: post
title: [Fundamentos] O problema da "escrita-dupla"
published: true
description: O problema da escrita-dupla em um sistema real
tags: sistemasdistribuidos, iniciante, microservi√ßos, java
//cover_image: https://direct_url_to_image.jpg
---

> Aviso: Esse artigo √© baseado em fatos reais üò¨.

Nesse artigo eu vou te apresentar o problema da escrita dupla ("dual write") e as consequ√™ncia desse problema em um sistema real que eu trabalhei. Eu n√£o espero te apresentar uma resposta definitiva sobre como lidar com o problema mas eu espero que essa introdu√ß√£o fa√ßa voc√™ entender o problema, pensar sobre ele, saber identific√°-lo e evit√°-lo.

## Problema

Vamos come√ßar descrevendo o nosso problema. N√≥s t√≠nhamos um sistema que fazia o seguinte:

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qeeqa8ct18vpd5y20n4.png)

1. Usu√°rio cria uma nova review
2. O reviewService cria a review no reposit√≥rio como pendente.
3. O reviewService invoca o approvalService enviando uma mensagem para que o sistema de modera√ß√£o aprove ou n√£o a review. Esse processamente ocorre ass√≠ncronamente.
4. O sistema responde a requisi√ß√£o com o ID da review pendente para que o usu√°rio possa verificar o status depois, se ela foi aprovada ou rejeitada.

Em c√≥digo o nosso caso de uso ficaria assim:

```java

package com.hugomarques;

public class ReviewController {

    private final ReviewRepository reviewsRepository;
    private final ApprovalWorkflow approvalService;

    ReviewController(ReviewRepository repository) {
        this.repository = repository;
    }

    @PostMapping("/reviews")
    @Transactional
    Review newReview(Review newReview) {
        var pendingReview = reviewsRepository.save(newReview);
        approvalService.send(pendingReview);
        return pendingReview;
    }
}
```

Anos atr√°s, em meados de 2009-2010, esse c√≥digo provavelmente seria implantado em um servidor JBoss, o repository seria um MySQL ou PostgresSQL e o approvalService estaria por detr√°s de uma fila JMS. E por que esses detalhes s√£o importantes? Essas tecnologias em conjunto garantiam o controle transacional, ou seja, se enviar a mensagem para fila falha, a transa√ß√£o seria desfeita no banco de dados.

Hoje em dia, esse mesmo sistema (por v√°rios motivos) poderia ser implementado sem o JBoss como servidor de aplica√ß√£o, o repository poderia usar o AWS DynamoDB e o messageria poderia utilizar o AWS SQS. Qual o problema que isso nos tr√°s? N√≥s n√£o temos mais o controle transacional. Se a nossa mensagem n√£o for enviada, o DynamoDB n√£o tem como fazer rollback üò±.

## Uma hist√≥ria real

Um dos times que eu trabalhei se deparou com esse problema um tempo atr√°s. Um belo dia a equipe come√ßou a receber tickets que algumas reviews estavam ficando bloqueadas em status `pendente`.

Eu era o engenheiro *on-call*  e decidi fazer uma an√°lise. Eu verifiquei que toda vez que a *review* estava pendente o nosso c√≥digo emitia uma *exception* de "Falha ao enviar mensagem para a fila".

Eu fui analisar o c√≥digo e vi algo parecido com o exemplo desse artigo. Pra fazer as coisas ainda piores o c√≥digo que enviava a mensagem estava contido dentro de um bloco `try/catch`, o catch logava o erro e n√£o fazia mais nada. Ou seja, a opera√ß√£o era retornada com sucesso para o usu√°rio!

Se voc√™ n√£o entendeu o problema, em vez do fluxo ideal que temos no exemplo esse fluxo de erro era o seguinte:

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw4ji8wqrpjr0r7trfy8.png)

1. Usu√°rio cria uma nova review
2. O reviewService cria a review no reposit√≥rio como pendente.
3. O reviewService invoca o approvalService enviando uma mensagem para que o sistema de modera√ß√£o aprove ou n√£o a review. Esse processamente ocorre ass√≠ncronamente.
4. A mensagem por qualquer motivo que seja falha ao ser enviada.
5. O reviewService loga uma mensagem "Falha ao enviar mensagem para a fila".
6. O reviewService retorna a review pendente ao usu√°rio.
7. Como a review n√£o foi enviada para o fluxo de aprova√ß√£o, ela ficar√° pendente para SEMPRE!.

## Uma solu√ß√£o "ing√™nua"

Depois que achamos o problema, n√≥s decidimos aplicar a solu√ß√£o mais simples poss√≠vel: Tratar o erro diretamente no c√≥digo, capturando o erro/exception e executando uma chamada de rollback para o servi√ßo 1. O nosso novo fluxo fica da seguinte forma:

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwp605d9785ckufzgrzd.png)

Vamos ver a implementa√ß√£o:

```Java

package com.hugomarques;

public class ReviewController {

    private final ReviewRepository repository;
    private final ApprovalWorkflow approvalWorkflowService;

    ReviewController(ReviewRepository repository) {
        this.repository = repository;
    }

    @PostMapping("/reviews")
    Review newReview(Review newReview) {
        var pendingReview = repository.save(newReview);
        try {
           var approvedReview
 = approvalWorkflowService.start(pendingReview);
           return approvedReview;
        catch (Exception e) {
           repository.delete(pendingReview);
        }
    }
}
```

Notem que eu chamei a solu√ß√£o de ing√™nua. Por qu√™? O que acontece se o seu servi√ßo tiver um problema de erro justo no rollback?

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftz9sveyolft8tdw3fw1.png)

Observe no diagrama acima, quando tentamos fazer o rollback chamando `repository.delete` o DynamoDB pode nos retornar um erro 400. Logo, nesse cen√°rio a nossa review continuar√° *pendente*.

Embora ing√™nua, a solu√ß√£o reduziu o n√∫mero de inconsist√™ncias em mais de 90%. Por ser uma solu√ß√£o barata e simples, ela foi suficiente para "estancar o sangramento".

Para uma solu√ß√£o mais robusta o time teria que rearquitetar algumas partes do sistema e usar alguns padr√µes de microservi√ßos como SAGAs e/ou "Transactional Outbox" mas isso s√£o cenas para os pr√≥ximos cap√≠tulos.

## Conclus√£o

Recapitulando o que aprendemos at√© aqui:
1. Cuidado ao invocar sistemas distribu√≠dos em sequ√™ncia sem contexto transacional. Isso √© receita para problemas de escrita-dupla e inconsist√™ncia dos dados.
2. Algumas vezes uma solu√ß√£o simples pode ser tudo que voc√™ precisa dependendo da sua escala.
3. Embora n√£o seja o foco aqui, voc√™ agora sabe que existem outros padr√µes para lidar com esse tipo de erro.

Eu espero que voc√™ tenha curtido. Se gostou, n√£o deixe de acompanhar as minhas dicas no twitter [@hugaomarques](https://twitter.com/hugaomarques).

Agradecimentos especiais ao @rponte e ao @zanfranceschi por revisarem o artigo e colaborarem com id√©ias.

## Quer saber mais?

[A discuss√£o segue bem interessante no twitter com refer√™ncias √† outras solu√ß√µes e padr√µes que lidam com esse problema](https://twitter.com/hugaomarques/status/1522681876208521216?s=20&t=_DVahG4vsows_rPVJlFFzg).