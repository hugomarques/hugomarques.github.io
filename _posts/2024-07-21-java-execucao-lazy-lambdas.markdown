---
title: "Java: Execu√ß√£o pregui√ßosa com Lambdas"
published: true
description: Lembre de que lambdas s√£o executados de forma "lazy"
tags: #java #lambda #streams 
# cover_image: https://direct_url_to_image.jpg
# Use a ratio of 100:42 for best results.
# published_at: 2024-07-19 18:51 +0000
---

Outro post curtinho! Esta semana eu peguei um bug interessante que achei bacana compartilhar com voc√™s. O bug em quest√£o me fez lembrar como lambdas s√£o executados de forma "lazy" no Java.

Vamos para o exemplo?

Execu√ß√£o pregui√ßosa da forma errada
Vamos analisar o seguinte exemplo. Imagine que voc√™ tem um stream em Java que voc√™ s√≥ quer executar dentro de um bloco com lock.

```java
public class LazyStreamExample {
   private static final Lock lock = new ReentrantLock();

    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Execu√ß√£o do Stream fora do Supplier
        System.out.println("Execu√ß√£o do Stream fora do Supplier");
        List<Integer> doubledNumbers = 
            numbers.stream()
                   .map(n -> {
                      System.out.println("Dobro de: " + n);
                      return n * 2;
                   })
                   .collect(Collectors.toList());

        writeToFileWithLock("output.txt", () -> doubledNumbers);
        System.out.println("Doubled Numbers: " + doubledNumbers);
    }

    private static void writeToFileWithLock(String filePath, Supplier<List<Integer>> supplier) {
        lock.lock();
        System.out.println("Lock adquirido!");
        try {
            List<Integer> result = supplier.get();
            String content = result.stream()
                                   .map(String::valueOf)
                                   .collect(Collectors.joining(", "));
            Files.write(Paths.get(filePath), content.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
            System.out.println("Resultado escrito no arquivo: " + content);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
            System.out.println("Lock released!");
        }
    }
}
```

Se execurtamos o c√≥digo acima veja o resultado: 

```java
Execu√ß√£o do Stream fora do Supplier
Dobro de: 1
Dobro de: 2
Dobro de: 3
Dobro de: 4
Dobro de: 5
Lock adquirido!
Resultado escrito no arquivo: 2, 4, 6, 8, 10
Lock released!
Doubled Numbers: [2, 4, 6, 8, 10]
```

O nosso c√≥digo executou fora do nosso lock üò±

## Execu√ß√£o pregui√ßosa do jeito certo!

A corre√ß√£o do problema acima √© trivial; basta entendermos que, para usarmos o poder "lazy" dos lambdas, precisamos executar o stream inteiro como parte do Supplier e n√£o em uma vari√°vel separada.

Podemos fazer isso encapsulando o c√≥digo em um m√©todo e chamando o m√©todo a partir do Supplier OU passando o bloco de c√≥digo diretamente no Supplier. Vou utilizar a segunda op√ß√£o aqui:

```java
public class LazyLambdaExampleCorreto {
    private static final Lock lock = new ReentrantLock();

    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Execu√ß√£o do Stream fora do Supplier
        System.out.println("Execu√ß√£o do Stream fora do Supplier");

        writeToFileWithLock("output.txt", () ->
                numbers.stream()
                        .map(n -> {
                            System.out.println("Dobro de: " + n);
                            return n * 2;
                        })
                        .collect(Collectors.toList()));
    }

    ...
}
```

O c√≥digo de escrita em arquivo continua o mesmo. A √∫nica coisa que mudamos foi passarmos o stream dentro do pr√≥prio supplier. Isso garante que s√≥ vamos executar o stream quando o `supplier.get()` for invocado.

O nosso novo resultado ser√°:

```java
Execu√ß√£o do Stream fora do Supplier
Lock adquirido!
Dobro de: 1
Dobro de: 2
Dobro de: 3
Dobro de: 4
Dobro de: 5
Resultado escrito no arquivo: 2, 4, 6, 8, 10
Lock released!
```

## Conclus√£o

Esse √© um "erro bobo" que me pegou desprevenido. Naquele momento, tentando manter o c√≥digo mais leg√≠vel, eu isolei o meu stream em uma vari√°vel. Isso fez com que meu c√≥digo rodasse fora do lock üòÖ.

Espero que este texto sirva de lembrete para voc√™s evitarem o mesmo problema.